/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type Json or null if there are no children of given type on this node */
  readonly childJson: Maybe<Json>;
  /** Returns the first child node of type Locale or null if there are no children of given type on this node */
  readonly childLocale: Maybe<Locale>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type Json */
  readonly childrenJson: Maybe<ReadonlyArray<Maybe<Json>>>;
  /** Returns all children nodes filtered by type Locale */
  readonly childrenLocale: Maybe<ReadonlyArray<Maybe<Locale>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'childJson.A_fee_for_every_transaction'
  | 'childJson.Allows_for_unfair_front_running'
  | 'childJson.Ambassador_program'
  | 'childJson.Anti_front_running'
  | 'childJson.As_seen_on'
  | 'childJson.Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_'
  | 'childJson.Available'
  | 'childJson.Avg__Block_Time'
  | 'childJson.Be_as_good_as_CeFi'
  | 'childJson.Be_better_than_CeFi'
  | 'childJson.Blog_posts'
  | 'childJson.Bounty'
  | 'childJson.Builders_Club'
  | 'childJson.Built_for_fairness_from_the_ground_up'
  | 'childJson.Built_in_liquidity_incentives'
  | 'childJson.Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_'
  | 'childJson.Careers_at_Vega'
  | 'childJson.Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_'
  | 'childJson.Closed_on_'
  | 'childJson.Community'
  | 'childJson.Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_'
  | 'childJson.Community_curation_of_markets'
  | 'childJson.Completely_decentralised_network'
  | 'childJson.Cross_chain_support'
  | 'childJson.Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_'
  | 'childJson.Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_'
  | 'childJson.Current_Epoch'
  | 'childJson.DM_us_on_Twitter'
  | 'childJson.Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'childJson.Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_'
  | 'childJson.Dynamic_margins_with_cross_margining'
  | 'childJson.Earn_rewards_for_finding_bugs'
  | 'childJson.Efficient_Price_Discovery'
  | 'childJson.Enacted_on_'
  | 'childJson.Ended'
  | 'childJson.Error_fetching_proposals___'
  | 'childJson.Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_'
  | 'childJson.Explore_all_proposals'
  | 'childJson.Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_'
  | 'childJson.Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_'
  | 'childJson.Fast_trading'
  | 'childJson.Find_out_how_to_get_your_hands_on_Vega_swag'
  | 'childJson.Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_'
  | 'childJson.Fluent_in_this_language__Help_us_translate_the_page_'
  | 'childJson.For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_'
  | 'childJson.For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_'
  | 'childJson.Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_'
  | 'childJson.Generalist_tool___A_workaround_for_trading'
  | 'childJson.Get_your_hands_on_it_here'
  | 'childJson.Go_to_Fairground'
  | 'childJson.Have_an_idea_for_an_event_or_talk_'
  | 'childJson.Help_DeFi_mature'
  | 'childJson.High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'childJson.How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_'
  | 'childJson.How_it_works'
  | 'childJson.Implementations'
  | 'childJson.Incentive'
  | 'childJson.Incentives___bounties'
  | 'childJson.Incentives_and_bounties'
  | 'childJson.Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_'
  | 'childJson.Join_the_core_team_and_work_on_the_Vega_project_'
  | 'childJson.Key_Vega_Concepts'
  | 'childJson.Key_concepts'
  | 'childJson.Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__'
  | 'childJson.Latest_Proposals'
  | 'childJson.Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_'
  | 'childJson.Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_'
  | 'childJson.Learn'
  | 'childJson.Loading___'
  | 'childJson.Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_'
  | 'childJson.Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_'
  | 'childJson.More_info'
  | 'childJson.Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_'
  | 'childJson.No_fees_on_orders'
  | 'childJson.No_gas_fees_on_trading'
  | 'childJson.No_proposals_found___'
  | 'childJson.Open_Jobs'
  | 'childJson.Optimised_for_high_capital_efficiency'
  | 'childJson.Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network'
  | 'childJson.Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_'
  | 'childJson.Papers'
  | 'childJson.Papers___Research'
  | 'childJson.Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_'
  | 'childJson.Pegged_orders_for_automated_order_management'
  | 'childJson.Permissionless_market_creation'
  | 'childJson.Pseudonymous_trading'
  | 'childJson.Purpose_built_bespoke_blockchain'
  | 'childJson.Read_more_about_'
  | 'childJson.Recordings_of_past_talks__events_and_podcasts'
  | 'childJson.Reward_'
  | 'childJson.Runs_slowly'
  | 'childJson.Scalable_DeFi_infrastructure'
  | 'childJson.See_more'
  | 'childJson.Small__purpose_built_smart_products_for_trading'
  | 'childJson.Smart_contracts_for_anything'
  | 'childJson.Specifically_built_for_trading'
  | 'childJson.Swag'
  | 'childJson.Talks'
  | 'childJson.The_Vega_mainnet_is_live__trading_launch_H2_2022'
  | 'childJson.The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_'
  | 'childJson.The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_'
  | 'childJson.Token_holders_can_participate_in_governance__stake_and_delegate_'
  | 'childJson.Total_Staked'
  | 'childJson.Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_'
  | 'childJson.Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_'
  | 'childJson.Use_Fairground__the_Vega_testnet__to_play_without_consequences_'
  | 'childJson.Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_'
  | 'childJson.Use_the_powerful_Vega_Console_app'
  | 'childJson.Validators'
  | 'childJson.Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_'
  | 'childJson.Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_'
  | 'childJson.Vega_is_designed_to_'
  | 'childJson.Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_'
  | 'childJson.Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_'
  | 'childJson.Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_'
  | 'childJson.Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_'
  | 'childJson.Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_'
  | 'childJson.Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_'
  | 'childJson.View'
  | 'childJson.View_all_posts'
  | 'childJson.View_more'
  | 'childJson.View_on_Github'
  | 'childJson.View_the_Roadmap'
  | 'childJson.Want_Swag_'
  | 'childJson.We_don_t_currently_have_any_open_job_roles_'
  | 'childJson.What_makes_Vega_different'
  | 'childJson.When_'
  | 'childJson.Your_career_in_Defi_starts_here'
  | 'childJson._0_Click_here_to_contribute__0__'
  | 'childJson._xminutesxxxminutexread'
  | 'childJson.children'
  | 'childJson.children.children'
  | 'childJson.children.children.children'
  | 'childJson.children.children.id'
  | 'childJson.children.id'
  | 'childJson.children.internal.content'
  | 'childJson.children.internal.contentDigest'
  | 'childJson.children.internal.contentFilePath'
  | 'childJson.children.internal.description'
  | 'childJson.children.internal.fieldOwners'
  | 'childJson.children.internal.ignoreType'
  | 'childJson.children.internal.mediaType'
  | 'childJson.children.internal.owner'
  | 'childJson.children.internal.type'
  | 'childJson.children.parent.children'
  | 'childJson.children.parent.id'
  | 'childJson.id'
  | 'childJson.internal.content'
  | 'childJson.internal.contentDigest'
  | 'childJson.internal.contentFilePath'
  | 'childJson.internal.description'
  | 'childJson.internal.fieldOwners'
  | 'childJson.internal.ignoreType'
  | 'childJson.internal.mediaType'
  | 'childJson.internal.owner'
  | 'childJson.internal.type'
  | 'childJson.parent.children'
  | 'childJson.parent.children.children'
  | 'childJson.parent.children.id'
  | 'childJson.parent.id'
  | 'childJson.parent.internal.content'
  | 'childJson.parent.internal.contentDigest'
  | 'childJson.parent.internal.contentFilePath'
  | 'childJson.parent.internal.description'
  | 'childJson.parent.internal.fieldOwners'
  | 'childJson.parent.internal.ignoreType'
  | 'childJson.parent.internal.mediaType'
  | 'childJson.parent.internal.owner'
  | 'childJson.parent.internal.type'
  | 'childJson.parent.parent.children'
  | 'childJson.parent.parent.id'
  | 'childLocale.children'
  | 'childLocale.children.children'
  | 'childLocale.children.children.children'
  | 'childLocale.children.children.id'
  | 'childLocale.children.id'
  | 'childLocale.children.internal.content'
  | 'childLocale.children.internal.contentDigest'
  | 'childLocale.children.internal.contentFilePath'
  | 'childLocale.children.internal.description'
  | 'childLocale.children.internal.fieldOwners'
  | 'childLocale.children.internal.ignoreType'
  | 'childLocale.children.internal.mediaType'
  | 'childLocale.children.internal.owner'
  | 'childLocale.children.internal.type'
  | 'childLocale.children.parent.children'
  | 'childLocale.children.parent.id'
  | 'childLocale.data'
  | 'childLocale.fileAbsolutePath'
  | 'childLocale.id'
  | 'childLocale.internal.content'
  | 'childLocale.internal.contentDigest'
  | 'childLocale.internal.contentFilePath'
  | 'childLocale.internal.description'
  | 'childLocale.internal.fieldOwners'
  | 'childLocale.internal.ignoreType'
  | 'childLocale.internal.mediaType'
  | 'childLocale.internal.owner'
  | 'childLocale.internal.type'
  | 'childLocale.language'
  | 'childLocale.ns'
  | 'childLocale.parent.children'
  | 'childLocale.parent.children.children'
  | 'childLocale.parent.children.id'
  | 'childLocale.parent.id'
  | 'childLocale.parent.internal.content'
  | 'childLocale.parent.internal.contentDigest'
  | 'childLocale.parent.internal.contentFilePath'
  | 'childLocale.parent.internal.description'
  | 'childLocale.parent.internal.fieldOwners'
  | 'childLocale.parent.internal.ignoreType'
  | 'childLocale.parent.internal.mediaType'
  | 'childLocale.parent.internal.owner'
  | 'childLocale.parent.internal.type'
  | 'childLocale.parent.parent.children'
  | 'childLocale.parent.parent.id'
  | 'childMarkdownRemark.children'
  | 'childMarkdownRemark.children.children'
  | 'childMarkdownRemark.children.children.children'
  | 'childMarkdownRemark.children.children.id'
  | 'childMarkdownRemark.children.id'
  | 'childMarkdownRemark.children.internal.content'
  | 'childMarkdownRemark.children.internal.contentDigest'
  | 'childMarkdownRemark.children.internal.contentFilePath'
  | 'childMarkdownRemark.children.internal.description'
  | 'childMarkdownRemark.children.internal.fieldOwners'
  | 'childMarkdownRemark.children.internal.ignoreType'
  | 'childMarkdownRemark.children.internal.mediaType'
  | 'childMarkdownRemark.children.internal.owner'
  | 'childMarkdownRemark.children.internal.type'
  | 'childMarkdownRemark.children.parent.children'
  | 'childMarkdownRemark.children.parent.id'
  | 'childMarkdownRemark.collection'
  | 'childMarkdownRemark.excerpt'
  | 'childMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.fields.category'
  | 'childMarkdownRemark.fields.locale'
  | 'childMarkdownRemark.fields.order'
  | 'childMarkdownRemark.fields.slug'
  | 'childMarkdownRemark.fileAbsolutePath'
  | 'childMarkdownRemark.frontmatter.category'
  | 'childMarkdownRemark.frontmatter.contract_type'
  | 'childMarkdownRemark.frontmatter.date'
  | 'childMarkdownRemark.frontmatter.description'
  | 'childMarkdownRemark.frontmatter.featuredImage.absolutePath'
  | 'childMarkdownRemark.frontmatter.featuredImage.accessTime'
  | 'childMarkdownRemark.frontmatter.featuredImage.atime'
  | 'childMarkdownRemark.frontmatter.featuredImage.atimeMs'
  | 'childMarkdownRemark.frontmatter.featuredImage.base'
  | 'childMarkdownRemark.frontmatter.featuredImage.birthTime'
  | 'childMarkdownRemark.frontmatter.featuredImage.birthtime'
  | 'childMarkdownRemark.frontmatter.featuredImage.birthtimeMs'
  | 'childMarkdownRemark.frontmatter.featuredImage.blksize'
  | 'childMarkdownRemark.frontmatter.featuredImage.blocks'
  | 'childMarkdownRemark.frontmatter.featuredImage.changeTime'
  | 'childMarkdownRemark.frontmatter.featuredImage.children'
  | 'childMarkdownRemark.frontmatter.featuredImage.childrenImageSharp'
  | 'childMarkdownRemark.frontmatter.featuredImage.childrenJson'
  | 'childMarkdownRemark.frontmatter.featuredImage.childrenLocale'
  | 'childMarkdownRemark.frontmatter.featuredImage.childrenMarkdownRemark'
  | 'childMarkdownRemark.frontmatter.featuredImage.ctime'
  | 'childMarkdownRemark.frontmatter.featuredImage.ctimeMs'
  | 'childMarkdownRemark.frontmatter.featuredImage.dev'
  | 'childMarkdownRemark.frontmatter.featuredImage.dir'
  | 'childMarkdownRemark.frontmatter.featuredImage.ext'
  | 'childMarkdownRemark.frontmatter.featuredImage.extension'
  | 'childMarkdownRemark.frontmatter.featuredImage.gid'
  | 'childMarkdownRemark.frontmatter.featuredImage.id'
  | 'childMarkdownRemark.frontmatter.featuredImage.ino'
  | 'childMarkdownRemark.frontmatter.featuredImage.mode'
  | 'childMarkdownRemark.frontmatter.featuredImage.modifiedTime'
  | 'childMarkdownRemark.frontmatter.featuredImage.mtime'
  | 'childMarkdownRemark.frontmatter.featuredImage.mtimeMs'
  | 'childMarkdownRemark.frontmatter.featuredImage.name'
  | 'childMarkdownRemark.frontmatter.featuredImage.nlink'
  | 'childMarkdownRemark.frontmatter.featuredImage.prettySize'
  | 'childMarkdownRemark.frontmatter.featuredImage.publicURL'
  | 'childMarkdownRemark.frontmatter.featuredImage.rdev'
  | 'childMarkdownRemark.frontmatter.featuredImage.relativeDirectory'
  | 'childMarkdownRemark.frontmatter.featuredImage.relativePath'
  | 'childMarkdownRemark.frontmatter.featuredImage.root'
  | 'childMarkdownRemark.frontmatter.featuredImage.size'
  | 'childMarkdownRemark.frontmatter.featuredImage.sourceInstanceName'
  | 'childMarkdownRemark.frontmatter.featuredImage.uid'
  | 'childMarkdownRemark.frontmatter.links'
  | 'childMarkdownRemark.frontmatter.links.link'
  | 'childMarkdownRemark.frontmatter.links.title'
  | 'childMarkdownRemark.frontmatter.location'
  | 'childMarkdownRemark.frontmatter.position'
  | 'childMarkdownRemark.frontmatter.slug'
  | 'childMarkdownRemark.frontmatter.start_date'
  | 'childMarkdownRemark.frontmatter.step_title'
  | 'childMarkdownRemark.frontmatter.title'
  | 'childMarkdownRemark.gatsbyPath'
  | 'childMarkdownRemark.headings'
  | 'childMarkdownRemark.headings.depth'
  | 'childMarkdownRemark.headings.id'
  | 'childMarkdownRemark.headings.value'
  | 'childMarkdownRemark.html'
  | 'childMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.id'
  | 'childMarkdownRemark.internal.content'
  | 'childMarkdownRemark.internal.contentDigest'
  | 'childMarkdownRemark.internal.contentFilePath'
  | 'childMarkdownRemark.internal.description'
  | 'childMarkdownRemark.internal.fieldOwners'
  | 'childMarkdownRemark.internal.ignoreType'
  | 'childMarkdownRemark.internal.mediaType'
  | 'childMarkdownRemark.internal.owner'
  | 'childMarkdownRemark.internal.type'
  | 'childMarkdownRemark.parent.children'
  | 'childMarkdownRemark.parent.children.children'
  | 'childMarkdownRemark.parent.children.id'
  | 'childMarkdownRemark.parent.id'
  | 'childMarkdownRemark.parent.internal.content'
  | 'childMarkdownRemark.parent.internal.contentDigest'
  | 'childMarkdownRemark.parent.internal.contentFilePath'
  | 'childMarkdownRemark.parent.internal.description'
  | 'childMarkdownRemark.parent.internal.fieldOwners'
  | 'childMarkdownRemark.parent.internal.ignoreType'
  | 'childMarkdownRemark.parent.internal.mediaType'
  | 'childMarkdownRemark.parent.internal.owner'
  | 'childMarkdownRemark.parent.internal.type'
  | 'childMarkdownRemark.parent.parent.children'
  | 'childMarkdownRemark.parent.parent.id'
  | 'childMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.wordCount.paragraphs'
  | 'childMarkdownRemark.wordCount.sentences'
  | 'childMarkdownRemark.wordCount.words'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'childrenJson'
  | 'childrenJson.A_fee_for_every_transaction'
  | 'childrenJson.Allows_for_unfair_front_running'
  | 'childrenJson.Ambassador_program'
  | 'childrenJson.Anti_front_running'
  | 'childrenJson.As_seen_on'
  | 'childrenJson.Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_'
  | 'childrenJson.Available'
  | 'childrenJson.Avg__Block_Time'
  | 'childrenJson.Be_as_good_as_CeFi'
  | 'childrenJson.Be_better_than_CeFi'
  | 'childrenJson.Blog_posts'
  | 'childrenJson.Bounty'
  | 'childrenJson.Builders_Club'
  | 'childrenJson.Built_for_fairness_from_the_ground_up'
  | 'childrenJson.Built_in_liquidity_incentives'
  | 'childrenJson.Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_'
  | 'childrenJson.Careers_at_Vega'
  | 'childrenJson.Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_'
  | 'childrenJson.Closed_on_'
  | 'childrenJson.Community'
  | 'childrenJson.Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_'
  | 'childrenJson.Community_curation_of_markets'
  | 'childrenJson.Completely_decentralised_network'
  | 'childrenJson.Cross_chain_support'
  | 'childrenJson.Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_'
  | 'childrenJson.Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_'
  | 'childrenJson.Current_Epoch'
  | 'childrenJson.DM_us_on_Twitter'
  | 'childrenJson.Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'childrenJson.Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_'
  | 'childrenJson.Dynamic_margins_with_cross_margining'
  | 'childrenJson.Earn_rewards_for_finding_bugs'
  | 'childrenJson.Efficient_Price_Discovery'
  | 'childrenJson.Enacted_on_'
  | 'childrenJson.Ended'
  | 'childrenJson.Error_fetching_proposals___'
  | 'childrenJson.Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_'
  | 'childrenJson.Explore_all_proposals'
  | 'childrenJson.Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_'
  | 'childrenJson.Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_'
  | 'childrenJson.Fast_trading'
  | 'childrenJson.Find_out_how_to_get_your_hands_on_Vega_swag'
  | 'childrenJson.Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_'
  | 'childrenJson.Fluent_in_this_language__Help_us_translate_the_page_'
  | 'childrenJson.For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_'
  | 'childrenJson.For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_'
  | 'childrenJson.Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_'
  | 'childrenJson.Generalist_tool___A_workaround_for_trading'
  | 'childrenJson.Get_your_hands_on_it_here'
  | 'childrenJson.Go_to_Fairground'
  | 'childrenJson.Have_an_idea_for_an_event_or_talk_'
  | 'childrenJson.Help_DeFi_mature'
  | 'childrenJson.High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'childrenJson.How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_'
  | 'childrenJson.How_it_works'
  | 'childrenJson.Implementations'
  | 'childrenJson.Incentive'
  | 'childrenJson.Incentives___bounties'
  | 'childrenJson.Incentives_and_bounties'
  | 'childrenJson.Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_'
  | 'childrenJson.Join_the_core_team_and_work_on_the_Vega_project_'
  | 'childrenJson.Key_Vega_Concepts'
  | 'childrenJson.Key_concepts'
  | 'childrenJson.Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__'
  | 'childrenJson.Latest_Proposals'
  | 'childrenJson.Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_'
  | 'childrenJson.Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_'
  | 'childrenJson.Learn'
  | 'childrenJson.Loading___'
  | 'childrenJson.Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_'
  | 'childrenJson.Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_'
  | 'childrenJson.More_info'
  | 'childrenJson.Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_'
  | 'childrenJson.No_fees_on_orders'
  | 'childrenJson.No_gas_fees_on_trading'
  | 'childrenJson.No_proposals_found___'
  | 'childrenJson.Open_Jobs'
  | 'childrenJson.Optimised_for_high_capital_efficiency'
  | 'childrenJson.Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network'
  | 'childrenJson.Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_'
  | 'childrenJson.Papers'
  | 'childrenJson.Papers___Research'
  | 'childrenJson.Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_'
  | 'childrenJson.Pegged_orders_for_automated_order_management'
  | 'childrenJson.Permissionless_market_creation'
  | 'childrenJson.Pseudonymous_trading'
  | 'childrenJson.Purpose_built_bespoke_blockchain'
  | 'childrenJson.Read_more_about_'
  | 'childrenJson.Recordings_of_past_talks__events_and_podcasts'
  | 'childrenJson.Reward_'
  | 'childrenJson.Runs_slowly'
  | 'childrenJson.Scalable_DeFi_infrastructure'
  | 'childrenJson.See_more'
  | 'childrenJson.Small__purpose_built_smart_products_for_trading'
  | 'childrenJson.Smart_contracts_for_anything'
  | 'childrenJson.Specifically_built_for_trading'
  | 'childrenJson.Swag'
  | 'childrenJson.Talks'
  | 'childrenJson.The_Vega_mainnet_is_live__trading_launch_H2_2022'
  | 'childrenJson.The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_'
  | 'childrenJson.The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_'
  | 'childrenJson.Token_holders_can_participate_in_governance__stake_and_delegate_'
  | 'childrenJson.Total_Staked'
  | 'childrenJson.Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_'
  | 'childrenJson.Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_'
  | 'childrenJson.Use_Fairground__the_Vega_testnet__to_play_without_consequences_'
  | 'childrenJson.Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_'
  | 'childrenJson.Use_the_powerful_Vega_Console_app'
  | 'childrenJson.Validators'
  | 'childrenJson.Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_'
  | 'childrenJson.Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_'
  | 'childrenJson.Vega_is_designed_to_'
  | 'childrenJson.Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_'
  | 'childrenJson.Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_'
  | 'childrenJson.Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_'
  | 'childrenJson.Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_'
  | 'childrenJson.Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_'
  | 'childrenJson.Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_'
  | 'childrenJson.View'
  | 'childrenJson.View_all_posts'
  | 'childrenJson.View_more'
  | 'childrenJson.View_on_Github'
  | 'childrenJson.View_the_Roadmap'
  | 'childrenJson.Want_Swag_'
  | 'childrenJson.We_don_t_currently_have_any_open_job_roles_'
  | 'childrenJson.What_makes_Vega_different'
  | 'childrenJson.When_'
  | 'childrenJson.Your_career_in_Defi_starts_here'
  | 'childrenJson._0_Click_here_to_contribute__0__'
  | 'childrenJson._xminutesxxxminutexread'
  | 'childrenJson.children'
  | 'childrenJson.children.children'
  | 'childrenJson.children.children.children'
  | 'childrenJson.children.children.id'
  | 'childrenJson.children.id'
  | 'childrenJson.children.internal.content'
  | 'childrenJson.children.internal.contentDigest'
  | 'childrenJson.children.internal.contentFilePath'
  | 'childrenJson.children.internal.description'
  | 'childrenJson.children.internal.fieldOwners'
  | 'childrenJson.children.internal.ignoreType'
  | 'childrenJson.children.internal.mediaType'
  | 'childrenJson.children.internal.owner'
  | 'childrenJson.children.internal.type'
  | 'childrenJson.children.parent.children'
  | 'childrenJson.children.parent.id'
  | 'childrenJson.id'
  | 'childrenJson.internal.content'
  | 'childrenJson.internal.contentDigest'
  | 'childrenJson.internal.contentFilePath'
  | 'childrenJson.internal.description'
  | 'childrenJson.internal.fieldOwners'
  | 'childrenJson.internal.ignoreType'
  | 'childrenJson.internal.mediaType'
  | 'childrenJson.internal.owner'
  | 'childrenJson.internal.type'
  | 'childrenJson.parent.children'
  | 'childrenJson.parent.children.children'
  | 'childrenJson.parent.children.id'
  | 'childrenJson.parent.id'
  | 'childrenJson.parent.internal.content'
  | 'childrenJson.parent.internal.contentDigest'
  | 'childrenJson.parent.internal.contentFilePath'
  | 'childrenJson.parent.internal.description'
  | 'childrenJson.parent.internal.fieldOwners'
  | 'childrenJson.parent.internal.ignoreType'
  | 'childrenJson.parent.internal.mediaType'
  | 'childrenJson.parent.internal.owner'
  | 'childrenJson.parent.internal.type'
  | 'childrenJson.parent.parent.children'
  | 'childrenJson.parent.parent.id'
  | 'childrenLocale'
  | 'childrenLocale.children'
  | 'childrenLocale.children.children'
  | 'childrenLocale.children.children.children'
  | 'childrenLocale.children.children.id'
  | 'childrenLocale.children.id'
  | 'childrenLocale.children.internal.content'
  | 'childrenLocale.children.internal.contentDigest'
  | 'childrenLocale.children.internal.contentFilePath'
  | 'childrenLocale.children.internal.description'
  | 'childrenLocale.children.internal.fieldOwners'
  | 'childrenLocale.children.internal.ignoreType'
  | 'childrenLocale.children.internal.mediaType'
  | 'childrenLocale.children.internal.owner'
  | 'childrenLocale.children.internal.type'
  | 'childrenLocale.children.parent.children'
  | 'childrenLocale.children.parent.id'
  | 'childrenLocale.data'
  | 'childrenLocale.fileAbsolutePath'
  | 'childrenLocale.id'
  | 'childrenLocale.internal.content'
  | 'childrenLocale.internal.contentDigest'
  | 'childrenLocale.internal.contentFilePath'
  | 'childrenLocale.internal.description'
  | 'childrenLocale.internal.fieldOwners'
  | 'childrenLocale.internal.ignoreType'
  | 'childrenLocale.internal.mediaType'
  | 'childrenLocale.internal.owner'
  | 'childrenLocale.internal.type'
  | 'childrenLocale.language'
  | 'childrenLocale.ns'
  | 'childrenLocale.parent.children'
  | 'childrenLocale.parent.children.children'
  | 'childrenLocale.parent.children.id'
  | 'childrenLocale.parent.id'
  | 'childrenLocale.parent.internal.content'
  | 'childrenLocale.parent.internal.contentDigest'
  | 'childrenLocale.parent.internal.contentFilePath'
  | 'childrenLocale.parent.internal.description'
  | 'childrenLocale.parent.internal.fieldOwners'
  | 'childrenLocale.parent.internal.ignoreType'
  | 'childrenLocale.parent.internal.mediaType'
  | 'childrenLocale.parent.internal.owner'
  | 'childrenLocale.parent.internal.type'
  | 'childrenLocale.parent.parent.children'
  | 'childrenLocale.parent.parent.id'
  | 'childrenMarkdownRemark'
  | 'childrenMarkdownRemark.children'
  | 'childrenMarkdownRemark.children.children'
  | 'childrenMarkdownRemark.children.children.children'
  | 'childrenMarkdownRemark.children.children.id'
  | 'childrenMarkdownRemark.children.id'
  | 'childrenMarkdownRemark.children.internal.content'
  | 'childrenMarkdownRemark.children.internal.contentDigest'
  | 'childrenMarkdownRemark.children.internal.contentFilePath'
  | 'childrenMarkdownRemark.children.internal.description'
  | 'childrenMarkdownRemark.children.internal.fieldOwners'
  | 'childrenMarkdownRemark.children.internal.ignoreType'
  | 'childrenMarkdownRemark.children.internal.mediaType'
  | 'childrenMarkdownRemark.children.internal.owner'
  | 'childrenMarkdownRemark.children.internal.type'
  | 'childrenMarkdownRemark.children.parent.children'
  | 'childrenMarkdownRemark.children.parent.id'
  | 'childrenMarkdownRemark.collection'
  | 'childrenMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.fields.category'
  | 'childrenMarkdownRemark.fields.locale'
  | 'childrenMarkdownRemark.fields.order'
  | 'childrenMarkdownRemark.fields.slug'
  | 'childrenMarkdownRemark.fileAbsolutePath'
  | 'childrenMarkdownRemark.frontmatter.category'
  | 'childrenMarkdownRemark.frontmatter.contract_type'
  | 'childrenMarkdownRemark.frontmatter.date'
  | 'childrenMarkdownRemark.frontmatter.description'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.absolutePath'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.accessTime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.atime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.atimeMs'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.base'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.birthTime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.birthtime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.birthtimeMs'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.blksize'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.blocks'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.changeTime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.children'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.childrenImageSharp'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.childrenJson'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.childrenLocale'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.childrenMarkdownRemark'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.ctime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.ctimeMs'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.dev'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.dir'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.ext'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.extension'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.gid'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.id'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.ino'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.mode'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.modifiedTime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.mtime'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.mtimeMs'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.name'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.nlink'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.prettySize'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.publicURL'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.rdev'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.relativeDirectory'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.relativePath'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.root'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.size'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.sourceInstanceName'
  | 'childrenMarkdownRemark.frontmatter.featuredImage.uid'
  | 'childrenMarkdownRemark.frontmatter.links'
  | 'childrenMarkdownRemark.frontmatter.links.link'
  | 'childrenMarkdownRemark.frontmatter.links.title'
  | 'childrenMarkdownRemark.frontmatter.location'
  | 'childrenMarkdownRemark.frontmatter.position'
  | 'childrenMarkdownRemark.frontmatter.slug'
  | 'childrenMarkdownRemark.frontmatter.start_date'
  | 'childrenMarkdownRemark.frontmatter.step_title'
  | 'childrenMarkdownRemark.frontmatter.title'
  | 'childrenMarkdownRemark.gatsbyPath'
  | 'childrenMarkdownRemark.headings'
  | 'childrenMarkdownRemark.headings.depth'
  | 'childrenMarkdownRemark.headings.id'
  | 'childrenMarkdownRemark.headings.value'
  | 'childrenMarkdownRemark.html'
  | 'childrenMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.id'
  | 'childrenMarkdownRemark.internal.content'
  | 'childrenMarkdownRemark.internal.contentDigest'
  | 'childrenMarkdownRemark.internal.contentFilePath'
  | 'childrenMarkdownRemark.internal.description'
  | 'childrenMarkdownRemark.internal.fieldOwners'
  | 'childrenMarkdownRemark.internal.ignoreType'
  | 'childrenMarkdownRemark.internal.mediaType'
  | 'childrenMarkdownRemark.internal.owner'
  | 'childrenMarkdownRemark.internal.type'
  | 'childrenMarkdownRemark.parent.children'
  | 'childrenMarkdownRemark.parent.children.children'
  | 'childrenMarkdownRemark.parent.children.id'
  | 'childrenMarkdownRemark.parent.id'
  | 'childrenMarkdownRemark.parent.internal.content'
  | 'childrenMarkdownRemark.parent.internal.contentDigest'
  | 'childrenMarkdownRemark.parent.internal.contentFilePath'
  | 'childrenMarkdownRemark.parent.internal.description'
  | 'childrenMarkdownRemark.parent.internal.fieldOwners'
  | 'childrenMarkdownRemark.parent.internal.ignoreType'
  | 'childrenMarkdownRemark.parent.internal.mediaType'
  | 'childrenMarkdownRemark.parent.internal.owner'
  | 'childrenMarkdownRemark.parent.internal.type'
  | 'childrenMarkdownRemark.parent.parent.children'
  | 'childrenMarkdownRemark.parent.parent.id'
  | 'childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.wordCount.paragraphs'
  | 'childrenMarkdownRemark.wordCount.sentences'
  | 'childrenMarkdownRemark.wordCount.words'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childJson: InputMaybe<JsonFilterInput>;
  readonly childLocale: InputMaybe<LocaleFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenJson: InputMaybe<JsonFilterListInput>;
  readonly childrenLocale: InputMaybe<LocaleFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type HeadingsMdx =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Incentives = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly end_date: Maybe<ReadonlyArray<Maybe<Scalars['Date']>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly name: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly parent: Maybe<Node>;
  readonly reward: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly start_date: Maybe<ReadonlyArray<Maybe<Scalars['Date']>>>;
  readonly status: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly type: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};


type Incentives_end_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Incentives_start_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type IncentivesConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<IncentivesEdge>;
  readonly group: ReadonlyArray<IncentivesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Incentives>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type IncentivesConnection_distinctArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesConnection_groupArgs = {
  field: IncentivesFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type IncentivesConnection_maxArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesConnection_minArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesConnection_sumArgs = {
  field: IncentivesFieldsEnum;
};

type IncentivesEdge = {
  readonly next: Maybe<Incentives>;
  readonly node: Incentives;
  readonly previous: Maybe<Incentives>;
};

type IncentivesFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'end_date'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'link'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'reward'
  | 'start_date'
  | 'status'
  | 'tags'
  | 'type';

type IncentivesFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly end_date: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly reward: InputMaybe<StringQueryOperatorInput>;
  readonly start_date: InputMaybe<DateQueryOperatorInput>;
  readonly status: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type IncentivesGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<IncentivesEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<IncentivesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Incentives>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type IncentivesGroupConnection_distinctArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesGroupConnection_groupArgs = {
  field: IncentivesFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type IncentivesGroupConnection_maxArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesGroupConnection_minArgs = {
  field: IncentivesFieldsEnum;
};


type IncentivesGroupConnection_sumArgs = {
  field: IncentivesFieldsEnum;
};

type IncentivesSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<IncentivesFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Json = Node & {
  readonly A_fee_for_every_transaction: Maybe<Scalars['String']>;
  readonly Allows_for_unfair_front_running: Maybe<Scalars['String']>;
  readonly Ambassador_program: Maybe<Scalars['String']>;
  readonly Anti_front_running: Maybe<Scalars['String']>;
  readonly As_seen_on: Maybe<Scalars['String']>;
  readonly Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_: Maybe<Scalars['String']>;
  readonly Available: Maybe<Scalars['String']>;
  readonly Avg__Block_Time: Maybe<Scalars['String']>;
  readonly Be_as_good_as_CeFi: Maybe<Scalars['String']>;
  readonly Be_better_than_CeFi: Maybe<Scalars['String']>;
  readonly Blog_posts: Maybe<Scalars['String']>;
  readonly Bounty: Maybe<Scalars['String']>;
  readonly Builders_Club: Maybe<Scalars['String']>;
  readonly Built_for_fairness_from_the_ground_up: Maybe<Scalars['String']>;
  readonly Built_in_liquidity_incentives: Maybe<Scalars['String']>;
  readonly Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_: Maybe<Scalars['String']>;
  readonly Careers_at_Vega: Maybe<Scalars['String']>;
  readonly Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_: Maybe<Scalars['String']>;
  readonly Closed_on_: Maybe<Scalars['String']>;
  readonly Community: Maybe<Scalars['String']>;
  readonly Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_: Maybe<Scalars['String']>;
  readonly Community_curation_of_markets: Maybe<Scalars['String']>;
  readonly Completely_decentralised_network: Maybe<Scalars['String']>;
  readonly Cross_chain_support: Maybe<Scalars['String']>;
  readonly Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_: Maybe<Scalars['String']>;
  readonly Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_: Maybe<Scalars['String']>;
  readonly Current_Epoch: Maybe<Scalars['String']>;
  readonly DM_us_on_Twitter: Maybe<Scalars['String']>;
  readonly Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_: Maybe<Scalars['String']>;
  readonly Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_: Maybe<Scalars['String']>;
  readonly Dynamic_margins_with_cross_margining: Maybe<Scalars['String']>;
  readonly Earn_rewards_for_finding_bugs: Maybe<Scalars['String']>;
  readonly Efficient_Price_Discovery: Maybe<Scalars['String']>;
  readonly Enacted_on_: Maybe<Scalars['String']>;
  readonly Ended: Maybe<Scalars['String']>;
  readonly Error_fetching_proposals___: Maybe<Scalars['String']>;
  readonly Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_: Maybe<Scalars['String']>;
  readonly Explore_all_proposals: Maybe<Scalars['String']>;
  readonly Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_: Maybe<Scalars['String']>;
  readonly Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_: Maybe<Scalars['String']>;
  readonly Fast_trading: Maybe<Scalars['String']>;
  readonly Find_out_how_to_get_your_hands_on_Vega_swag: Maybe<Scalars['String']>;
  readonly Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_: Maybe<Scalars['String']>;
  readonly Fluent_in_this_language__Help_us_translate_the_page_: Maybe<Scalars['String']>;
  readonly For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_: Maybe<Scalars['String']>;
  readonly For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_: Maybe<Scalars['String']>;
  readonly Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_: Maybe<Scalars['String']>;
  readonly Generalist_tool___A_workaround_for_trading: Maybe<Scalars['String']>;
  readonly Get_your_hands_on_it_here: Maybe<Scalars['String']>;
  readonly Go_to_Fairground: Maybe<Scalars['String']>;
  readonly Have_an_idea_for_an_event_or_talk_: Maybe<Scalars['String']>;
  readonly Help_DeFi_mature: Maybe<Scalars['String']>;
  readonly High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_: Maybe<Scalars['String']>;
  readonly How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_: Maybe<Scalars['String']>;
  readonly How_it_works: Maybe<Scalars['String']>;
  readonly Implementations: Maybe<Scalars['String']>;
  readonly Incentive: Maybe<Scalars['String']>;
  readonly Incentives___bounties: Maybe<Scalars['String']>;
  readonly Incentives_and_bounties: Maybe<Scalars['String']>;
  readonly Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_: Maybe<Scalars['String']>;
  readonly Join_the_core_team_and_work_on_the_Vega_project_: Maybe<Scalars['String']>;
  readonly Key_Vega_Concepts: Maybe<Scalars['String']>;
  readonly Key_concepts: Maybe<Scalars['String']>;
  readonly Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__: Maybe<Scalars['String']>;
  readonly Latest_Proposals: Maybe<Scalars['String']>;
  readonly Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_: Maybe<Scalars['String']>;
  readonly Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_: Maybe<Scalars['String']>;
  readonly Learn: Maybe<Scalars['String']>;
  readonly Loading___: Maybe<Scalars['String']>;
  readonly Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_: Maybe<Scalars['String']>;
  readonly Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_: Maybe<Scalars['String']>;
  readonly More_info: Maybe<Scalars['String']>;
  readonly Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_: Maybe<Scalars['String']>;
  readonly No_fees_on_orders: Maybe<Scalars['String']>;
  readonly No_gas_fees_on_trading: Maybe<Scalars['String']>;
  readonly No_proposals_found___: Maybe<Scalars['String']>;
  readonly Open_Jobs: Maybe<Scalars['String']>;
  readonly Optimised_for_high_capital_efficiency: Maybe<Scalars['String']>;
  readonly Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network: Maybe<Scalars['String']>;
  readonly Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_: Maybe<Scalars['String']>;
  readonly Papers: Maybe<Scalars['String']>;
  readonly Papers___Research: Maybe<Scalars['String']>;
  readonly Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_: Maybe<Scalars['String']>;
  readonly Pegged_orders_for_automated_order_management: Maybe<Scalars['String']>;
  readonly Permissionless_market_creation: Maybe<Scalars['String']>;
  readonly Pseudonymous_trading: Maybe<Scalars['String']>;
  readonly Purpose_built_bespoke_blockchain: Maybe<Scalars['String']>;
  readonly Read_more_about_: Maybe<Scalars['String']>;
  readonly Recordings_of_past_talks__events_and_podcasts: Maybe<Scalars['String']>;
  readonly Reward_: Maybe<Scalars['String']>;
  readonly Runs_slowly: Maybe<Scalars['String']>;
  readonly Scalable_DeFi_infrastructure: Maybe<Scalars['String']>;
  readonly See_more: Maybe<Scalars['String']>;
  readonly Small__purpose_built_smart_products_for_trading: Maybe<Scalars['String']>;
  readonly Smart_contracts_for_anything: Maybe<Scalars['String']>;
  readonly Specifically_built_for_trading: Maybe<Scalars['String']>;
  readonly Swag: Maybe<Scalars['String']>;
  readonly Talks: Maybe<Scalars['String']>;
  readonly The_Vega_mainnet_is_live__trading_launch_H2_2022: Maybe<Scalars['String']>;
  readonly The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_: Maybe<Scalars['String']>;
  readonly The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_: Maybe<Scalars['String']>;
  readonly Token_holders_can_participate_in_governance__stake_and_delegate_: Maybe<Scalars['String']>;
  readonly Total_Staked: Maybe<Scalars['String']>;
  readonly Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_: Maybe<Scalars['String']>;
  readonly Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_: Maybe<Scalars['String']>;
  readonly Use_Fairground__the_Vega_testnet__to_play_without_consequences_: Maybe<Scalars['String']>;
  readonly Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_: Maybe<Scalars['String']>;
  readonly Use_the_powerful_Vega_Console_app: Maybe<Scalars['String']>;
  readonly Validators: Maybe<Scalars['String']>;
  readonly Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_: Maybe<Scalars['String']>;
  readonly Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_: Maybe<Scalars['String']>;
  readonly Vega_is_designed_to_: Maybe<Scalars['String']>;
  readonly Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_: Maybe<Scalars['String']>;
  readonly Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_: Maybe<Scalars['String']>;
  readonly Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_: Maybe<Scalars['String']>;
  readonly Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_: Maybe<Scalars['String']>;
  readonly Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_: Maybe<Scalars['String']>;
  readonly Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_: Maybe<Scalars['String']>;
  readonly View: Maybe<Scalars['String']>;
  readonly View_all_posts: Maybe<Scalars['String']>;
  readonly View_more: Maybe<Scalars['String']>;
  readonly View_on_Github: Maybe<Scalars['String']>;
  readonly View_the_Roadmap: Maybe<Scalars['String']>;
  readonly Want_Swag_: Maybe<Scalars['String']>;
  readonly We_don_t_currently_have_any_open_job_roles_: Maybe<Scalars['String']>;
  readonly What_makes_Vega_different: Maybe<Scalars['String']>;
  readonly When_: Maybe<Scalars['String']>;
  readonly Your_career_in_Defi_starts_here: Maybe<Scalars['String']>;
  readonly _0_Click_here_to_contribute__0__: Maybe<Scalars['String']>;
  readonly _xminutesxxxminutexread: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type JsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<JsonEdge>;
  readonly group: ReadonlyArray<JsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Json>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type JsonConnection_distinctArgs = {
  field: JsonFieldsEnum;
};


type JsonConnection_groupArgs = {
  field: JsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type JsonConnection_maxArgs = {
  field: JsonFieldsEnum;
};


type JsonConnection_minArgs = {
  field: JsonFieldsEnum;
};


type JsonConnection_sumArgs = {
  field: JsonFieldsEnum;
};

type JsonEdge = {
  readonly next: Maybe<Json>;
  readonly node: Json;
  readonly previous: Maybe<Json>;
};

type JsonFieldsEnum =
  | 'A_fee_for_every_transaction'
  | 'Allows_for_unfair_front_running'
  | 'Ambassador_program'
  | 'Anti_front_running'
  | 'As_seen_on'
  | 'Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_'
  | 'Available'
  | 'Avg__Block_Time'
  | 'Be_as_good_as_CeFi'
  | 'Be_better_than_CeFi'
  | 'Blog_posts'
  | 'Bounty'
  | 'Builders_Club'
  | 'Built_for_fairness_from_the_ground_up'
  | 'Built_in_liquidity_incentives'
  | 'Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_'
  | 'Careers_at_Vega'
  | 'Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_'
  | 'Closed_on_'
  | 'Community'
  | 'Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_'
  | 'Community_curation_of_markets'
  | 'Completely_decentralised_network'
  | 'Cross_chain_support'
  | 'Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_'
  | 'Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_'
  | 'Current_Epoch'
  | 'DM_us_on_Twitter'
  | 'Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_'
  | 'Dynamic_margins_with_cross_margining'
  | 'Earn_rewards_for_finding_bugs'
  | 'Efficient_Price_Discovery'
  | 'Enacted_on_'
  | 'Ended'
  | 'Error_fetching_proposals___'
  | 'Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_'
  | 'Explore_all_proposals'
  | 'Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_'
  | 'Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_'
  | 'Fast_trading'
  | 'Find_out_how_to_get_your_hands_on_Vega_swag'
  | 'Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_'
  | 'Fluent_in_this_language__Help_us_translate_the_page_'
  | 'For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_'
  | 'For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_'
  | 'Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_'
  | 'Generalist_tool___A_workaround_for_trading'
  | 'Get_your_hands_on_it_here'
  | 'Go_to_Fairground'
  | 'Have_an_idea_for_an_event_or_talk_'
  | 'Help_DeFi_mature'
  | 'High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_'
  | 'How_it_works'
  | 'Implementations'
  | 'Incentive'
  | 'Incentives___bounties'
  | 'Incentives_and_bounties'
  | 'Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_'
  | 'Join_the_core_team_and_work_on_the_Vega_project_'
  | 'Key_Vega_Concepts'
  | 'Key_concepts'
  | 'Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__'
  | 'Latest_Proposals'
  | 'Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_'
  | 'Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_'
  | 'Learn'
  | 'Loading___'
  | 'Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_'
  | 'Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_'
  | 'More_info'
  | 'Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_'
  | 'No_fees_on_orders'
  | 'No_gas_fees_on_trading'
  | 'No_proposals_found___'
  | 'Open_Jobs'
  | 'Optimised_for_high_capital_efficiency'
  | 'Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network'
  | 'Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_'
  | 'Papers'
  | 'Papers___Research'
  | 'Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_'
  | 'Pegged_orders_for_automated_order_management'
  | 'Permissionless_market_creation'
  | 'Pseudonymous_trading'
  | 'Purpose_built_bespoke_blockchain'
  | 'Read_more_about_'
  | 'Recordings_of_past_talks__events_and_podcasts'
  | 'Reward_'
  | 'Runs_slowly'
  | 'Scalable_DeFi_infrastructure'
  | 'See_more'
  | 'Small__purpose_built_smart_products_for_trading'
  | 'Smart_contracts_for_anything'
  | 'Specifically_built_for_trading'
  | 'Swag'
  | 'Talks'
  | 'The_Vega_mainnet_is_live__trading_launch_H2_2022'
  | 'The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_'
  | 'The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_'
  | 'Token_holders_can_participate_in_governance__stake_and_delegate_'
  | 'Total_Staked'
  | 'Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_'
  | 'Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_'
  | 'Use_Fairground__the_Vega_testnet__to_play_without_consequences_'
  | 'Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_'
  | 'Use_the_powerful_Vega_Console_app'
  | 'Validators'
  | 'Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_'
  | 'Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_'
  | 'Vega_is_designed_to_'
  | 'Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_'
  | 'Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_'
  | 'Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_'
  | 'Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_'
  | 'Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_'
  | 'Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_'
  | 'View'
  | 'View_all_posts'
  | 'View_more'
  | 'View_on_Github'
  | 'View_the_Roadmap'
  | 'Want_Swag_'
  | 'We_don_t_currently_have_any_open_job_roles_'
  | 'What_makes_Vega_different'
  | 'When_'
  | 'Your_career_in_Defi_starts_here'
  | '_0_Click_here_to_contribute__0__'
  | '_xminutesxxxminutexread'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type JsonFilterInput = {
  readonly A_fee_for_every_transaction: InputMaybe<StringQueryOperatorInput>;
  readonly Allows_for_unfair_front_running: InputMaybe<StringQueryOperatorInput>;
  readonly Ambassador_program: InputMaybe<StringQueryOperatorInput>;
  readonly Anti_front_running: InputMaybe<StringQueryOperatorInput>;
  readonly As_seen_on: InputMaybe<StringQueryOperatorInput>;
  readonly Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_: InputMaybe<StringQueryOperatorInput>;
  readonly Available: InputMaybe<StringQueryOperatorInput>;
  readonly Avg__Block_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Be_as_good_as_CeFi: InputMaybe<StringQueryOperatorInput>;
  readonly Be_better_than_CeFi: InputMaybe<StringQueryOperatorInput>;
  readonly Blog_posts: InputMaybe<StringQueryOperatorInput>;
  readonly Bounty: InputMaybe<StringQueryOperatorInput>;
  readonly Builders_Club: InputMaybe<StringQueryOperatorInput>;
  readonly Built_for_fairness_from_the_ground_up: InputMaybe<StringQueryOperatorInput>;
  readonly Built_in_liquidity_incentives: InputMaybe<StringQueryOperatorInput>;
  readonly Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_: InputMaybe<StringQueryOperatorInput>;
  readonly Careers_at_Vega: InputMaybe<StringQueryOperatorInput>;
  readonly Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_: InputMaybe<StringQueryOperatorInput>;
  readonly Closed_on_: InputMaybe<StringQueryOperatorInput>;
  readonly Community: InputMaybe<StringQueryOperatorInput>;
  readonly Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_: InputMaybe<StringQueryOperatorInput>;
  readonly Community_curation_of_markets: InputMaybe<StringQueryOperatorInput>;
  readonly Completely_decentralised_network: InputMaybe<StringQueryOperatorInput>;
  readonly Cross_chain_support: InputMaybe<StringQueryOperatorInput>;
  readonly Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_: InputMaybe<StringQueryOperatorInput>;
  readonly Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_: InputMaybe<StringQueryOperatorInput>;
  readonly Current_Epoch: InputMaybe<StringQueryOperatorInput>;
  readonly DM_us_on_Twitter: InputMaybe<StringQueryOperatorInput>;
  readonly Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_: InputMaybe<StringQueryOperatorInput>;
  readonly Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_: InputMaybe<StringQueryOperatorInput>;
  readonly Dynamic_margins_with_cross_margining: InputMaybe<StringQueryOperatorInput>;
  readonly Earn_rewards_for_finding_bugs: InputMaybe<StringQueryOperatorInput>;
  readonly Efficient_Price_Discovery: InputMaybe<StringQueryOperatorInput>;
  readonly Enacted_on_: InputMaybe<StringQueryOperatorInput>;
  readonly Ended: InputMaybe<StringQueryOperatorInput>;
  readonly Error_fetching_proposals___: InputMaybe<StringQueryOperatorInput>;
  readonly Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_: InputMaybe<StringQueryOperatorInput>;
  readonly Explore_all_proposals: InputMaybe<StringQueryOperatorInput>;
  readonly Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_: InputMaybe<StringQueryOperatorInput>;
  readonly Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_: InputMaybe<StringQueryOperatorInput>;
  readonly Fast_trading: InputMaybe<StringQueryOperatorInput>;
  readonly Find_out_how_to_get_your_hands_on_Vega_swag: InputMaybe<StringQueryOperatorInput>;
  readonly Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_: InputMaybe<StringQueryOperatorInput>;
  readonly Fluent_in_this_language__Help_us_translate_the_page_: InputMaybe<StringQueryOperatorInput>;
  readonly For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_: InputMaybe<StringQueryOperatorInput>;
  readonly For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_: InputMaybe<StringQueryOperatorInput>;
  readonly Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_: InputMaybe<StringQueryOperatorInput>;
  readonly Generalist_tool___A_workaround_for_trading: InputMaybe<StringQueryOperatorInput>;
  readonly Get_your_hands_on_it_here: InputMaybe<StringQueryOperatorInput>;
  readonly Go_to_Fairground: InputMaybe<StringQueryOperatorInput>;
  readonly Have_an_idea_for_an_event_or_talk_: InputMaybe<StringQueryOperatorInput>;
  readonly Help_DeFi_mature: InputMaybe<StringQueryOperatorInput>;
  readonly High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_: InputMaybe<StringQueryOperatorInput>;
  readonly How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_: InputMaybe<StringQueryOperatorInput>;
  readonly How_it_works: InputMaybe<StringQueryOperatorInput>;
  readonly Implementations: InputMaybe<StringQueryOperatorInput>;
  readonly Incentive: InputMaybe<StringQueryOperatorInput>;
  readonly Incentives___bounties: InputMaybe<StringQueryOperatorInput>;
  readonly Incentives_and_bounties: InputMaybe<StringQueryOperatorInput>;
  readonly Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_: InputMaybe<StringQueryOperatorInput>;
  readonly Join_the_core_team_and_work_on_the_Vega_project_: InputMaybe<StringQueryOperatorInput>;
  readonly Key_Vega_Concepts: InputMaybe<StringQueryOperatorInput>;
  readonly Key_concepts: InputMaybe<StringQueryOperatorInput>;
  readonly Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__: InputMaybe<StringQueryOperatorInput>;
  readonly Latest_Proposals: InputMaybe<StringQueryOperatorInput>;
  readonly Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_: InputMaybe<StringQueryOperatorInput>;
  readonly Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_: InputMaybe<StringQueryOperatorInput>;
  readonly Learn: InputMaybe<StringQueryOperatorInput>;
  readonly Loading___: InputMaybe<StringQueryOperatorInput>;
  readonly Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_: InputMaybe<StringQueryOperatorInput>;
  readonly Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_: InputMaybe<StringQueryOperatorInput>;
  readonly More_info: InputMaybe<StringQueryOperatorInput>;
  readonly Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_: InputMaybe<StringQueryOperatorInput>;
  readonly No_fees_on_orders: InputMaybe<StringQueryOperatorInput>;
  readonly No_gas_fees_on_trading: InputMaybe<StringQueryOperatorInput>;
  readonly No_proposals_found___: InputMaybe<StringQueryOperatorInput>;
  readonly Open_Jobs: InputMaybe<StringQueryOperatorInput>;
  readonly Optimised_for_high_capital_efficiency: InputMaybe<StringQueryOperatorInput>;
  readonly Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network: InputMaybe<StringQueryOperatorInput>;
  readonly Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_: InputMaybe<StringQueryOperatorInput>;
  readonly Papers: InputMaybe<StringQueryOperatorInput>;
  readonly Papers___Research: InputMaybe<StringQueryOperatorInput>;
  readonly Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_: InputMaybe<StringQueryOperatorInput>;
  readonly Pegged_orders_for_automated_order_management: InputMaybe<StringQueryOperatorInput>;
  readonly Permissionless_market_creation: InputMaybe<StringQueryOperatorInput>;
  readonly Pseudonymous_trading: InputMaybe<StringQueryOperatorInput>;
  readonly Purpose_built_bespoke_blockchain: InputMaybe<StringQueryOperatorInput>;
  readonly Read_more_about_: InputMaybe<StringQueryOperatorInput>;
  readonly Recordings_of_past_talks__events_and_podcasts: InputMaybe<StringQueryOperatorInput>;
  readonly Reward_: InputMaybe<StringQueryOperatorInput>;
  readonly Runs_slowly: InputMaybe<StringQueryOperatorInput>;
  readonly Scalable_DeFi_infrastructure: InputMaybe<StringQueryOperatorInput>;
  readonly See_more: InputMaybe<StringQueryOperatorInput>;
  readonly Small__purpose_built_smart_products_for_trading: InputMaybe<StringQueryOperatorInput>;
  readonly Smart_contracts_for_anything: InputMaybe<StringQueryOperatorInput>;
  readonly Specifically_built_for_trading: InputMaybe<StringQueryOperatorInput>;
  readonly Swag: InputMaybe<StringQueryOperatorInput>;
  readonly Talks: InputMaybe<StringQueryOperatorInput>;
  readonly The_Vega_mainnet_is_live__trading_launch_H2_2022: InputMaybe<StringQueryOperatorInput>;
  readonly The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_: InputMaybe<StringQueryOperatorInput>;
  readonly The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_: InputMaybe<StringQueryOperatorInput>;
  readonly Token_holders_can_participate_in_governance__stake_and_delegate_: InputMaybe<StringQueryOperatorInput>;
  readonly Total_Staked: InputMaybe<StringQueryOperatorInput>;
  readonly Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_: InputMaybe<StringQueryOperatorInput>;
  readonly Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_: InputMaybe<StringQueryOperatorInput>;
  readonly Use_Fairground__the_Vega_testnet__to_play_without_consequences_: InputMaybe<StringQueryOperatorInput>;
  readonly Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_: InputMaybe<StringQueryOperatorInput>;
  readonly Use_the_powerful_Vega_Console_app: InputMaybe<StringQueryOperatorInput>;
  readonly Validators: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_is_designed_to_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_: InputMaybe<StringQueryOperatorInput>;
  readonly Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_: InputMaybe<StringQueryOperatorInput>;
  readonly View: InputMaybe<StringQueryOperatorInput>;
  readonly View_all_posts: InputMaybe<StringQueryOperatorInput>;
  readonly View_more: InputMaybe<StringQueryOperatorInput>;
  readonly View_on_Github: InputMaybe<StringQueryOperatorInput>;
  readonly View_the_Roadmap: InputMaybe<StringQueryOperatorInput>;
  readonly Want_Swag_: InputMaybe<StringQueryOperatorInput>;
  readonly We_don_t_currently_have_any_open_job_roles_: InputMaybe<StringQueryOperatorInput>;
  readonly What_makes_Vega_different: InputMaybe<StringQueryOperatorInput>;
  readonly When_: InputMaybe<StringQueryOperatorInput>;
  readonly Your_career_in_Defi_starts_here: InputMaybe<StringQueryOperatorInput>;
  readonly _0_Click_here_to_contribute__0__: InputMaybe<StringQueryOperatorInput>;
  readonly _xminutesxxxminutexread: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type JsonFilterListInput = {
  readonly elemMatch: InputMaybe<JsonFilterInput>;
};

type JsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<JsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<JsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Json>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type JsonGroupConnection_distinctArgs = {
  field: JsonFieldsEnum;
};


type JsonGroupConnection_groupArgs = {
  field: JsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type JsonGroupConnection_maxArgs = {
  field: JsonFieldsEnum;
};


type JsonGroupConnection_minArgs = {
  field: JsonFieldsEnum;
};


type JsonGroupConnection_sumArgs = {
  field: JsonFieldsEnum;
};

type JsonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<JsonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Locale = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly data: Maybe<Scalars['String']>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly language: Maybe<Scalars['String']>;
  readonly ns: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type LocaleConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocaleEdge>;
  readonly group: ReadonlyArray<LocaleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Locale>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocaleConnection_distinctArgs = {
  field: LocaleFieldsEnum;
};


type LocaleConnection_groupArgs = {
  field: LocaleFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocaleConnection_maxArgs = {
  field: LocaleFieldsEnum;
};


type LocaleConnection_minArgs = {
  field: LocaleFieldsEnum;
};


type LocaleConnection_sumArgs = {
  field: LocaleFieldsEnum;
};

type LocaleEdge = {
  readonly next: Maybe<Locale>;
  readonly node: Locale;
  readonly previous: Maybe<Locale>;
};

type LocaleFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'data'
  | 'fileAbsolutePath'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'language'
  | 'ns'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type LocaleFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<StringQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly ns: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type LocaleFilterListInput = {
  readonly elemMatch: InputMaybe<LocaleFilterInput>;
};

type LocaleGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocaleEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LocaleGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Locale>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocaleGroupConnection_distinctArgs = {
  field: LocaleFieldsEnum;
};


type LocaleGroupConnection_groupArgs = {
  field: LocaleFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocaleGroupConnection_maxArgs = {
  field: LocaleFieldsEnum;
};


type LocaleGroupConnection_minArgs = {
  field: LocaleFieldsEnum;
};


type LocaleGroupConnection_sumArgs = {
  field: LocaleFieldsEnum;
};

type LocaleSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<LocaleFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly collection: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fields: Maybe<MarkdownRemarkFields>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFields = {
  readonly category: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly slug: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'collection'
  | 'excerpt'
  | 'excerptAst'
  | 'fields.category'
  | 'fields.locale'
  | 'fields.order'
  | 'fields.slug'
  | 'fileAbsolutePath'
  | 'frontmatter.category'
  | 'frontmatter.contract_type'
  | 'frontmatter.date'
  | 'frontmatter.description'
  | 'frontmatter.featuredImage.absolutePath'
  | 'frontmatter.featuredImage.accessTime'
  | 'frontmatter.featuredImage.atime'
  | 'frontmatter.featuredImage.atimeMs'
  | 'frontmatter.featuredImage.base'
  | 'frontmatter.featuredImage.birthTime'
  | 'frontmatter.featuredImage.birthtime'
  | 'frontmatter.featuredImage.birthtimeMs'
  | 'frontmatter.featuredImage.blksize'
  | 'frontmatter.featuredImage.blocks'
  | 'frontmatter.featuredImage.changeTime'
  | 'frontmatter.featuredImage.childImageSharp.children'
  | 'frontmatter.featuredImage.childImageSharp.gatsbyImageData'
  | 'frontmatter.featuredImage.childImageSharp.id'
  | 'frontmatter.featuredImage.childJson.A_fee_for_every_transaction'
  | 'frontmatter.featuredImage.childJson.Allows_for_unfair_front_running'
  | 'frontmatter.featuredImage.childJson.Ambassador_program'
  | 'frontmatter.featuredImage.childJson.Anti_front_running'
  | 'frontmatter.featuredImage.childJson.As_seen_on'
  | 'frontmatter.featuredImage.childJson.Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_'
  | 'frontmatter.featuredImage.childJson.Available'
  | 'frontmatter.featuredImage.childJson.Avg__Block_Time'
  | 'frontmatter.featuredImage.childJson.Be_as_good_as_CeFi'
  | 'frontmatter.featuredImage.childJson.Be_better_than_CeFi'
  | 'frontmatter.featuredImage.childJson.Blog_posts'
  | 'frontmatter.featuredImage.childJson.Bounty'
  | 'frontmatter.featuredImage.childJson.Builders_Club'
  | 'frontmatter.featuredImage.childJson.Built_for_fairness_from_the_ground_up'
  | 'frontmatter.featuredImage.childJson.Built_in_liquidity_incentives'
  | 'frontmatter.featuredImage.childJson.Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_'
  | 'frontmatter.featuredImage.childJson.Careers_at_Vega'
  | 'frontmatter.featuredImage.childJson.Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_'
  | 'frontmatter.featuredImage.childJson.Closed_on_'
  | 'frontmatter.featuredImage.childJson.Community'
  | 'frontmatter.featuredImage.childJson.Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_'
  | 'frontmatter.featuredImage.childJson.Community_curation_of_markets'
  | 'frontmatter.featuredImage.childJson.Completely_decentralised_network'
  | 'frontmatter.featuredImage.childJson.Cross_chain_support'
  | 'frontmatter.featuredImage.childJson.Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_'
  | 'frontmatter.featuredImage.childJson.Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_'
  | 'frontmatter.featuredImage.childJson.Current_Epoch'
  | 'frontmatter.featuredImage.childJson.DM_us_on_Twitter'
  | 'frontmatter.featuredImage.childJson.Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'frontmatter.featuredImage.childJson.Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_'
  | 'frontmatter.featuredImage.childJson.Dynamic_margins_with_cross_margining'
  | 'frontmatter.featuredImage.childJson.Earn_rewards_for_finding_bugs'
  | 'frontmatter.featuredImage.childJson.Efficient_Price_Discovery'
  | 'frontmatter.featuredImage.childJson.Enacted_on_'
  | 'frontmatter.featuredImage.childJson.Ended'
  | 'frontmatter.featuredImage.childJson.Error_fetching_proposals___'
  | 'frontmatter.featuredImage.childJson.Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_'
  | 'frontmatter.featuredImage.childJson.Explore_all_proposals'
  | 'frontmatter.featuredImage.childJson.Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_'
  | 'frontmatter.featuredImage.childJson.Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_'
  | 'frontmatter.featuredImage.childJson.Fast_trading'
  | 'frontmatter.featuredImage.childJson.Find_out_how_to_get_your_hands_on_Vega_swag'
  | 'frontmatter.featuredImage.childJson.Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_'
  | 'frontmatter.featuredImage.childJson.Fluent_in_this_language__Help_us_translate_the_page_'
  | 'frontmatter.featuredImage.childJson.For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_'
  | 'frontmatter.featuredImage.childJson.For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_'
  | 'frontmatter.featuredImage.childJson.Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_'
  | 'frontmatter.featuredImage.childJson.Generalist_tool___A_workaround_for_trading'
  | 'frontmatter.featuredImage.childJson.Get_your_hands_on_it_here'
  | 'frontmatter.featuredImage.childJson.Go_to_Fairground'
  | 'frontmatter.featuredImage.childJson.Have_an_idea_for_an_event_or_talk_'
  | 'frontmatter.featuredImage.childJson.Help_DeFi_mature'
  | 'frontmatter.featuredImage.childJson.High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'frontmatter.featuredImage.childJson.How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_'
  | 'frontmatter.featuredImage.childJson.How_it_works'
  | 'frontmatter.featuredImage.childJson.Implementations'
  | 'frontmatter.featuredImage.childJson.Incentive'
  | 'frontmatter.featuredImage.childJson.Incentives___bounties'
  | 'frontmatter.featuredImage.childJson.Incentives_and_bounties'
  | 'frontmatter.featuredImage.childJson.Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_'
  | 'frontmatter.featuredImage.childJson.Join_the_core_team_and_work_on_the_Vega_project_'
  | 'frontmatter.featuredImage.childJson.Key_Vega_Concepts'
  | 'frontmatter.featuredImage.childJson.Key_concepts'
  | 'frontmatter.featuredImage.childJson.Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__'
  | 'frontmatter.featuredImage.childJson.Latest_Proposals'
  | 'frontmatter.featuredImage.childJson.Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_'
  | 'frontmatter.featuredImage.childJson.Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_'
  | 'frontmatter.featuredImage.childJson.Learn'
  | 'frontmatter.featuredImage.childJson.Loading___'
  | 'frontmatter.featuredImage.childJson.Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_'
  | 'frontmatter.featuredImage.childJson.Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_'
  | 'frontmatter.featuredImage.childJson.More_info'
  | 'frontmatter.featuredImage.childJson.Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_'
  | 'frontmatter.featuredImage.childJson.No_fees_on_orders'
  | 'frontmatter.featuredImage.childJson.No_gas_fees_on_trading'
  | 'frontmatter.featuredImage.childJson.No_proposals_found___'
  | 'frontmatter.featuredImage.childJson.Open_Jobs'
  | 'frontmatter.featuredImage.childJson.Optimised_for_high_capital_efficiency'
  | 'frontmatter.featuredImage.childJson.Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network'
  | 'frontmatter.featuredImage.childJson.Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_'
  | 'frontmatter.featuredImage.childJson.Papers'
  | 'frontmatter.featuredImage.childJson.Papers___Research'
  | 'frontmatter.featuredImage.childJson.Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_'
  | 'frontmatter.featuredImage.childJson.Pegged_orders_for_automated_order_management'
  | 'frontmatter.featuredImage.childJson.Permissionless_market_creation'
  | 'frontmatter.featuredImage.childJson.Pseudonymous_trading'
  | 'frontmatter.featuredImage.childJson.Purpose_built_bespoke_blockchain'
  | 'frontmatter.featuredImage.childJson.Read_more_about_'
  | 'frontmatter.featuredImage.childJson.Recordings_of_past_talks__events_and_podcasts'
  | 'frontmatter.featuredImage.childJson.Reward_'
  | 'frontmatter.featuredImage.childJson.Runs_slowly'
  | 'frontmatter.featuredImage.childJson.Scalable_DeFi_infrastructure'
  | 'frontmatter.featuredImage.childJson.See_more'
  | 'frontmatter.featuredImage.childJson.Small__purpose_built_smart_products_for_trading'
  | 'frontmatter.featuredImage.childJson.Smart_contracts_for_anything'
  | 'frontmatter.featuredImage.childJson.Specifically_built_for_trading'
  | 'frontmatter.featuredImage.childJson.Swag'
  | 'frontmatter.featuredImage.childJson.Talks'
  | 'frontmatter.featuredImage.childJson.The_Vega_mainnet_is_live__trading_launch_H2_2022'
  | 'frontmatter.featuredImage.childJson.The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_'
  | 'frontmatter.featuredImage.childJson.The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_'
  | 'frontmatter.featuredImage.childJson.Token_holders_can_participate_in_governance__stake_and_delegate_'
  | 'frontmatter.featuredImage.childJson.Total_Staked'
  | 'frontmatter.featuredImage.childJson.Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_'
  | 'frontmatter.featuredImage.childJson.Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_'
  | 'frontmatter.featuredImage.childJson.Use_Fairground__the_Vega_testnet__to_play_without_consequences_'
  | 'frontmatter.featuredImage.childJson.Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_'
  | 'frontmatter.featuredImage.childJson.Use_the_powerful_Vega_Console_app'
  | 'frontmatter.featuredImage.childJson.Validators'
  | 'frontmatter.featuredImage.childJson.Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_'
  | 'frontmatter.featuredImage.childJson.Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_'
  | 'frontmatter.featuredImage.childJson.Vega_is_designed_to_'
  | 'frontmatter.featuredImage.childJson.Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_'
  | 'frontmatter.featuredImage.childJson.Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_'
  | 'frontmatter.featuredImage.childJson.Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_'
  | 'frontmatter.featuredImage.childJson.Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_'
  | 'frontmatter.featuredImage.childJson.Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_'
  | 'frontmatter.featuredImage.childJson.Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_'
  | 'frontmatter.featuredImage.childJson.View'
  | 'frontmatter.featuredImage.childJson.View_all_posts'
  | 'frontmatter.featuredImage.childJson.View_more'
  | 'frontmatter.featuredImage.childJson.View_on_Github'
  | 'frontmatter.featuredImage.childJson.View_the_Roadmap'
  | 'frontmatter.featuredImage.childJson.Want_Swag_'
  | 'frontmatter.featuredImage.childJson.We_don_t_currently_have_any_open_job_roles_'
  | 'frontmatter.featuredImage.childJson.What_makes_Vega_different'
  | 'frontmatter.featuredImage.childJson.When_'
  | 'frontmatter.featuredImage.childJson.Your_career_in_Defi_starts_here'
  | 'frontmatter.featuredImage.childJson._0_Click_here_to_contribute__0__'
  | 'frontmatter.featuredImage.childJson._xminutesxxxminutexread'
  | 'frontmatter.featuredImage.childJson.children'
  | 'frontmatter.featuredImage.childJson.id'
  | 'frontmatter.featuredImage.childLocale.children'
  | 'frontmatter.featuredImage.childLocale.data'
  | 'frontmatter.featuredImage.childLocale.fileAbsolutePath'
  | 'frontmatter.featuredImage.childLocale.id'
  | 'frontmatter.featuredImage.childLocale.language'
  | 'frontmatter.featuredImage.childLocale.ns'
  | 'frontmatter.featuredImage.childMarkdownRemark.children'
  | 'frontmatter.featuredImage.childMarkdownRemark.collection'
  | 'frontmatter.featuredImage.childMarkdownRemark.excerpt'
  | 'frontmatter.featuredImage.childMarkdownRemark.excerptAst'
  | 'frontmatter.featuredImage.childMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.featuredImage.childMarkdownRemark.gatsbyPath'
  | 'frontmatter.featuredImage.childMarkdownRemark.headings'
  | 'frontmatter.featuredImage.childMarkdownRemark.html'
  | 'frontmatter.featuredImage.childMarkdownRemark.htmlAst'
  | 'frontmatter.featuredImage.childMarkdownRemark.id'
  | 'frontmatter.featuredImage.childMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.featuredImage.childMarkdownRemark.tableOfContents'
  | 'frontmatter.featuredImage.childMarkdownRemark.timeToRead'
  | 'frontmatter.featuredImage.children'
  | 'frontmatter.featuredImage.childrenImageSharp'
  | 'frontmatter.featuredImage.childrenImageSharp.children'
  | 'frontmatter.featuredImage.childrenImageSharp.gatsbyImageData'
  | 'frontmatter.featuredImage.childrenImageSharp.id'
  | 'frontmatter.featuredImage.childrenJson'
  | 'frontmatter.featuredImage.childrenJson.A_fee_for_every_transaction'
  | 'frontmatter.featuredImage.childrenJson.Allows_for_unfair_front_running'
  | 'frontmatter.featuredImage.childrenJson.Ambassador_program'
  | 'frontmatter.featuredImage.childrenJson.Anti_front_running'
  | 'frontmatter.featuredImage.childrenJson.As_seen_on'
  | 'frontmatter.featuredImage.childrenJson.Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_'
  | 'frontmatter.featuredImage.childrenJson.Available'
  | 'frontmatter.featuredImage.childrenJson.Avg__Block_Time'
  | 'frontmatter.featuredImage.childrenJson.Be_as_good_as_CeFi'
  | 'frontmatter.featuredImage.childrenJson.Be_better_than_CeFi'
  | 'frontmatter.featuredImage.childrenJson.Blog_posts'
  | 'frontmatter.featuredImage.childrenJson.Bounty'
  | 'frontmatter.featuredImage.childrenJson.Builders_Club'
  | 'frontmatter.featuredImage.childrenJson.Built_for_fairness_from_the_ground_up'
  | 'frontmatter.featuredImage.childrenJson.Built_in_liquidity_incentives'
  | 'frontmatter.featuredImage.childrenJson.Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_'
  | 'frontmatter.featuredImage.childrenJson.Careers_at_Vega'
  | 'frontmatter.featuredImage.childrenJson.Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_'
  | 'frontmatter.featuredImage.childrenJson.Closed_on_'
  | 'frontmatter.featuredImage.childrenJson.Community'
  | 'frontmatter.featuredImage.childrenJson.Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_'
  | 'frontmatter.featuredImage.childrenJson.Community_curation_of_markets'
  | 'frontmatter.featuredImage.childrenJson.Completely_decentralised_network'
  | 'frontmatter.featuredImage.childrenJson.Cross_chain_support'
  | 'frontmatter.featuredImage.childrenJson.Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_'
  | 'frontmatter.featuredImage.childrenJson.Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_'
  | 'frontmatter.featuredImage.childrenJson.Current_Epoch'
  | 'frontmatter.featuredImage.childrenJson.DM_us_on_Twitter'
  | 'frontmatter.featuredImage.childrenJson.Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'frontmatter.featuredImage.childrenJson.Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_'
  | 'frontmatter.featuredImage.childrenJson.Dynamic_margins_with_cross_margining'
  | 'frontmatter.featuredImage.childrenJson.Earn_rewards_for_finding_bugs'
  | 'frontmatter.featuredImage.childrenJson.Efficient_Price_Discovery'
  | 'frontmatter.featuredImage.childrenJson.Enacted_on_'
  | 'frontmatter.featuredImage.childrenJson.Ended'
  | 'frontmatter.featuredImage.childrenJson.Error_fetching_proposals___'
  | 'frontmatter.featuredImage.childrenJson.Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_'
  | 'frontmatter.featuredImage.childrenJson.Explore_all_proposals'
  | 'frontmatter.featuredImage.childrenJson.Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_'
  | 'frontmatter.featuredImage.childrenJson.Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_'
  | 'frontmatter.featuredImage.childrenJson.Fast_trading'
  | 'frontmatter.featuredImage.childrenJson.Find_out_how_to_get_your_hands_on_Vega_swag'
  | 'frontmatter.featuredImage.childrenJson.Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_'
  | 'frontmatter.featuredImage.childrenJson.Fluent_in_this_language__Help_us_translate_the_page_'
  | 'frontmatter.featuredImage.childrenJson.For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_'
  | 'frontmatter.featuredImage.childrenJson.For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_'
  | 'frontmatter.featuredImage.childrenJson.Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_'
  | 'frontmatter.featuredImage.childrenJson.Generalist_tool___A_workaround_for_trading'
  | 'frontmatter.featuredImage.childrenJson.Get_your_hands_on_it_here'
  | 'frontmatter.featuredImage.childrenJson.Go_to_Fairground'
  | 'frontmatter.featuredImage.childrenJson.Have_an_idea_for_an_event_or_talk_'
  | 'frontmatter.featuredImage.childrenJson.Help_DeFi_mature'
  | 'frontmatter.featuredImage.childrenJson.High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_'
  | 'frontmatter.featuredImage.childrenJson.How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_'
  | 'frontmatter.featuredImage.childrenJson.How_it_works'
  | 'frontmatter.featuredImage.childrenJson.Implementations'
  | 'frontmatter.featuredImage.childrenJson.Incentive'
  | 'frontmatter.featuredImage.childrenJson.Incentives___bounties'
  | 'frontmatter.featuredImage.childrenJson.Incentives_and_bounties'
  | 'frontmatter.featuredImage.childrenJson.Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_'
  | 'frontmatter.featuredImage.childrenJson.Join_the_core_team_and_work_on_the_Vega_project_'
  | 'frontmatter.featuredImage.childrenJson.Key_Vega_Concepts'
  | 'frontmatter.featuredImage.childrenJson.Key_concepts'
  | 'frontmatter.featuredImage.childrenJson.Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__'
  | 'frontmatter.featuredImage.childrenJson.Latest_Proposals'
  | 'frontmatter.featuredImage.childrenJson.Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_'
  | 'frontmatter.featuredImage.childrenJson.Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_'
  | 'frontmatter.featuredImage.childrenJson.Learn'
  | 'frontmatter.featuredImage.childrenJson.Loading___'
  | 'frontmatter.featuredImage.childrenJson.Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_'
  | 'frontmatter.featuredImage.childrenJson.Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_'
  | 'frontmatter.featuredImage.childrenJson.More_info'
  | 'frontmatter.featuredImage.childrenJson.Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_'
  | 'frontmatter.featuredImage.childrenJson.No_fees_on_orders'
  | 'frontmatter.featuredImage.childrenJson.No_gas_fees_on_trading'
  | 'frontmatter.featuredImage.childrenJson.No_proposals_found___'
  | 'frontmatter.featuredImage.childrenJson.Open_Jobs'
  | 'frontmatter.featuredImage.childrenJson.Optimised_for_high_capital_efficiency'
  | 'frontmatter.featuredImage.childrenJson.Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network'
  | 'frontmatter.featuredImage.childrenJson.Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_'
  | 'frontmatter.featuredImage.childrenJson.Papers'
  | 'frontmatter.featuredImage.childrenJson.Papers___Research'
  | 'frontmatter.featuredImage.childrenJson.Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_'
  | 'frontmatter.featuredImage.childrenJson.Pegged_orders_for_automated_order_management'
  | 'frontmatter.featuredImage.childrenJson.Permissionless_market_creation'
  | 'frontmatter.featuredImage.childrenJson.Pseudonymous_trading'
  | 'frontmatter.featuredImage.childrenJson.Purpose_built_bespoke_blockchain'
  | 'frontmatter.featuredImage.childrenJson.Read_more_about_'
  | 'frontmatter.featuredImage.childrenJson.Recordings_of_past_talks__events_and_podcasts'
  | 'frontmatter.featuredImage.childrenJson.Reward_'
  | 'frontmatter.featuredImage.childrenJson.Runs_slowly'
  | 'frontmatter.featuredImage.childrenJson.Scalable_DeFi_infrastructure'
  | 'frontmatter.featuredImage.childrenJson.See_more'
  | 'frontmatter.featuredImage.childrenJson.Small__purpose_built_smart_products_for_trading'
  | 'frontmatter.featuredImage.childrenJson.Smart_contracts_for_anything'
  | 'frontmatter.featuredImage.childrenJson.Specifically_built_for_trading'
  | 'frontmatter.featuredImage.childrenJson.Swag'
  | 'frontmatter.featuredImage.childrenJson.Talks'
  | 'frontmatter.featuredImage.childrenJson.The_Vega_mainnet_is_live__trading_launch_H2_2022'
  | 'frontmatter.featuredImage.childrenJson.The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_'
  | 'frontmatter.featuredImage.childrenJson.The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_'
  | 'frontmatter.featuredImage.childrenJson.Token_holders_can_participate_in_governance__stake_and_delegate_'
  | 'frontmatter.featuredImage.childrenJson.Total_Staked'
  | 'frontmatter.featuredImage.childrenJson.Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_'
  | 'frontmatter.featuredImage.childrenJson.Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_'
  | 'frontmatter.featuredImage.childrenJson.Use_Fairground__the_Vega_testnet__to_play_without_consequences_'
  | 'frontmatter.featuredImage.childrenJson.Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_'
  | 'frontmatter.featuredImage.childrenJson.Use_the_powerful_Vega_Console_app'
  | 'frontmatter.featuredImage.childrenJson.Validators'
  | 'frontmatter.featuredImage.childrenJson.Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_'
  | 'frontmatter.featuredImage.childrenJson.Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_'
  | 'frontmatter.featuredImage.childrenJson.Vega_is_designed_to_'
  | 'frontmatter.featuredImage.childrenJson.Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_'
  | 'frontmatter.featuredImage.childrenJson.Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_'
  | 'frontmatter.featuredImage.childrenJson.Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_'
  | 'frontmatter.featuredImage.childrenJson.Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_'
  | 'frontmatter.featuredImage.childrenJson.Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_'
  | 'frontmatter.featuredImage.childrenJson.Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_'
  | 'frontmatter.featuredImage.childrenJson.View'
  | 'frontmatter.featuredImage.childrenJson.View_all_posts'
  | 'frontmatter.featuredImage.childrenJson.View_more'
  | 'frontmatter.featuredImage.childrenJson.View_on_Github'
  | 'frontmatter.featuredImage.childrenJson.View_the_Roadmap'
  | 'frontmatter.featuredImage.childrenJson.Want_Swag_'
  | 'frontmatter.featuredImage.childrenJson.We_don_t_currently_have_any_open_job_roles_'
  | 'frontmatter.featuredImage.childrenJson.What_makes_Vega_different'
  | 'frontmatter.featuredImage.childrenJson.When_'
  | 'frontmatter.featuredImage.childrenJson.Your_career_in_Defi_starts_here'
  | 'frontmatter.featuredImage.childrenJson._0_Click_here_to_contribute__0__'
  | 'frontmatter.featuredImage.childrenJson._xminutesxxxminutexread'
  | 'frontmatter.featuredImage.childrenJson.children'
  | 'frontmatter.featuredImage.childrenJson.id'
  | 'frontmatter.featuredImage.childrenLocale'
  | 'frontmatter.featuredImage.childrenLocale.children'
  | 'frontmatter.featuredImage.childrenLocale.data'
  | 'frontmatter.featuredImage.childrenLocale.fileAbsolutePath'
  | 'frontmatter.featuredImage.childrenLocale.id'
  | 'frontmatter.featuredImage.childrenLocale.language'
  | 'frontmatter.featuredImage.childrenLocale.ns'
  | 'frontmatter.featuredImage.childrenMarkdownRemark'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.children'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.collection'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.excerpt'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.excerptAst'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.gatsbyPath'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.headings'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.html'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.htmlAst'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.id'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.tableOfContents'
  | 'frontmatter.featuredImage.childrenMarkdownRemark.timeToRead'
  | 'frontmatter.featuredImage.children.children'
  | 'frontmatter.featuredImage.children.id'
  | 'frontmatter.featuredImage.ctime'
  | 'frontmatter.featuredImage.ctimeMs'
  | 'frontmatter.featuredImage.dev'
  | 'frontmatter.featuredImage.dir'
  | 'frontmatter.featuredImage.ext'
  | 'frontmatter.featuredImage.extension'
  | 'frontmatter.featuredImage.gid'
  | 'frontmatter.featuredImage.id'
  | 'frontmatter.featuredImage.ino'
  | 'frontmatter.featuredImage.internal.content'
  | 'frontmatter.featuredImage.internal.contentDigest'
  | 'frontmatter.featuredImage.internal.contentFilePath'
  | 'frontmatter.featuredImage.internal.description'
  | 'frontmatter.featuredImage.internal.fieldOwners'
  | 'frontmatter.featuredImage.internal.ignoreType'
  | 'frontmatter.featuredImage.internal.mediaType'
  | 'frontmatter.featuredImage.internal.owner'
  | 'frontmatter.featuredImage.internal.type'
  | 'frontmatter.featuredImage.mode'
  | 'frontmatter.featuredImage.modifiedTime'
  | 'frontmatter.featuredImage.mtime'
  | 'frontmatter.featuredImage.mtimeMs'
  | 'frontmatter.featuredImage.name'
  | 'frontmatter.featuredImage.nlink'
  | 'frontmatter.featuredImage.parent.children'
  | 'frontmatter.featuredImage.parent.id'
  | 'frontmatter.featuredImage.prettySize'
  | 'frontmatter.featuredImage.publicURL'
  | 'frontmatter.featuredImage.rdev'
  | 'frontmatter.featuredImage.relativeDirectory'
  | 'frontmatter.featuredImage.relativePath'
  | 'frontmatter.featuredImage.root'
  | 'frontmatter.featuredImage.size'
  | 'frontmatter.featuredImage.sourceInstanceName'
  | 'frontmatter.featuredImage.uid'
  | 'frontmatter.links'
  | 'frontmatter.links.link'
  | 'frontmatter.links.title'
  | 'frontmatter.location'
  | 'frontmatter.position'
  | 'frontmatter.slug'
  | 'frontmatter.start_date'
  | 'frontmatter.step_title'
  | 'frontmatter.title'
  | 'gatsbyPath'
  | 'headings'
  | 'headings.depth'
  | 'headings.id'
  | 'headings.value'
  | 'html'
  | 'htmlAst'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawMarkdownBody'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MarkdownRemarkFieldsFilterInput = {
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly collection: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly category: Maybe<Scalars['String']>;
  readonly contract_type: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly featuredImage: Maybe<File>;
  readonly links: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterLinks>>>;
  readonly location: Maybe<Scalars['String']>;
  readonly position: Maybe<Scalars['Int']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly start_date: Maybe<Scalars['String']>;
  readonly step_title: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly contract_type: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly featuredImage: InputMaybe<FileFilterInput>;
  readonly links: InputMaybe<MarkdownRemarkFrontmatterLinksFilterListInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly position: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly start_date: InputMaybe<StringQueryOperatorInput>;
  readonly step_title: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterLinks = {
  readonly link: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterLinksFilterInput = {
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterLinksFilterInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type Mdx = Node & {
  readonly body: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Scalars['String'];
  readonly fileAbsolutePath: Scalars['String'];
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MdxHeadingMdx>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mdxAST: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly rawBody: Scalars['String'];
  readonly slug: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MdxWordCount>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type Mdx_headingsArgs = {
  depth: InputMaybe<HeadingsMdx>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldsEnum =
  | 'body'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'fileAbsolutePath'
  | 'frontmatter.title'
  | 'headings'
  | 'headings.depth'
  | 'headings.value'
  | 'html'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mdxAST'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawBody'
  | 'slug'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mdxAST: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawBody: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MdxWordCountFilterInput>;
};

type MdxFrontmatter = {
  readonly title: Scalars['String'];
};

type MdxFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldsEnum;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldsEnum;
};

type MdxHeadingMdx = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly value: Maybe<Scalars['String']>;
};

type MdxHeadingMdxFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MdxHeadingMdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxHeadingMdxFilterInput>;
};

type MdxSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MdxFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MdxWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MdxWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollection = Node & {
  readonly acceleratedMobilePagesState: Maybe<Scalars['Int']>;
  readonly ampLogo: Maybe<MediumCollectionAmpLogo>;
  readonly children: ReadonlyArray<Node>;
  readonly collectionFeatures: Maybe<ReadonlyArray<Maybe<Scalars['Int']>>>;
  readonly colorBehavior: Maybe<Scalars['Int']>;
  readonly colorPalette: Maybe<MediumCollectionColorPalette>;
  readonly creatorId: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly domain: Maybe<Scalars['String']>;
  readonly facebookPageName: Maybe<Scalars['String']>;
  readonly favicon: Maybe<MediumCollectionFavicon>;
  readonly header: Maybe<MediumCollectionHeader>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<MediumCollectionImage>;
  readonly instantArticlesState: Maybe<Scalars['Int']>;
  readonly internal: Internal;
  readonly isCurationAllowedByDefault: Maybe<Scalars['Boolean']>;
  readonly isOptedIntoAurora: Maybe<Scalars['Boolean']>;
  readonly lightText: Maybe<Scalars['Boolean']>;
  readonly logo: Maybe<MediumCollectionLogo>;
  readonly medium_id: Maybe<Scalars['String']>;
  readonly metadata: Maybe<MediumCollectionMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly navItems: Maybe<ReadonlyArray<Maybe<MediumCollectionNavItems>>>;
  readonly paidForDomainAt: Maybe<Scalars['Date']>;
  readonly parent: Maybe<Node>;
  readonly polarisCoverImage: Maybe<MediumCollectionPolarisCoverImage>;
  readonly publicEmail: Maybe<Scalars['String']>;
  readonly sections: Maybe<ReadonlyArray<Maybe<MediumCollectionSections>>>;
  readonly shortDescription: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly subscriberCount: Maybe<Scalars['Int']>;
  readonly tagline: Maybe<Scalars['String']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly tintColor: Maybe<Scalars['String']>;
  readonly twitterUsername: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly virtuals: Maybe<MediumCollectionVirtuals>;
};


type MediumCollection_paidForDomainAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumCollectionAmpLogo = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumCollectionAmpLogoFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionColorPalette = {
  readonly darkBackgroundSpectrum: Maybe<MediumCollectionColorPaletteDarkBackgroundSpectrum>;
  readonly defaultBackgroundSpectrum: Maybe<MediumCollectionColorPaletteDefaultBackgroundSpectrum>;
  readonly highlightSpectrum: Maybe<MediumCollectionColorPaletteHighlightSpectrum>;
  readonly tintBackgroundSpectrum: Maybe<MediumCollectionColorPaletteTintBackgroundSpectrum>;
};

type MediumCollectionColorPaletteDarkBackgroundSpectrum = {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly colorPoints: Maybe<ReadonlyArray<Maybe<MediumCollectionColorPaletteDarkBackgroundSpectrumColorPoints>>>;
};

type MediumCollectionColorPaletteDarkBackgroundSpectrumColorPoints = {
  readonly color: Maybe<Scalars['String']>;
  readonly point: Maybe<Scalars['Float']>;
};

type MediumCollectionColorPaletteDarkBackgroundSpectrumColorPointsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly point: InputMaybe<FloatQueryOperatorInput>;
};

type MediumCollectionColorPaletteDarkBackgroundSpectrumColorPointsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionColorPaletteDarkBackgroundSpectrumColorPointsFilterInput>;
};

type MediumCollectionColorPaletteDarkBackgroundSpectrumFilterInput = {
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly colorPoints: InputMaybe<MediumCollectionColorPaletteDarkBackgroundSpectrumColorPointsFilterListInput>;
};

type MediumCollectionColorPaletteDefaultBackgroundSpectrum = {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly colorPoints: Maybe<ReadonlyArray<Maybe<MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPoints>>>;
};

type MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPoints = {
  readonly color: Maybe<Scalars['String']>;
  readonly point: Maybe<Scalars['Float']>;
};

type MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPointsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly point: InputMaybe<FloatQueryOperatorInput>;
};

type MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPointsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPointsFilterInput>;
};

type MediumCollectionColorPaletteDefaultBackgroundSpectrumFilterInput = {
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly colorPoints: InputMaybe<MediumCollectionColorPaletteDefaultBackgroundSpectrumColorPointsFilterListInput>;
};

type MediumCollectionColorPaletteFilterInput = {
  readonly darkBackgroundSpectrum: InputMaybe<MediumCollectionColorPaletteDarkBackgroundSpectrumFilterInput>;
  readonly defaultBackgroundSpectrum: InputMaybe<MediumCollectionColorPaletteDefaultBackgroundSpectrumFilterInput>;
  readonly highlightSpectrum: InputMaybe<MediumCollectionColorPaletteHighlightSpectrumFilterInput>;
  readonly tintBackgroundSpectrum: InputMaybe<MediumCollectionColorPaletteTintBackgroundSpectrumFilterInput>;
};

type MediumCollectionColorPaletteHighlightSpectrum = {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly colorPoints: Maybe<ReadonlyArray<Maybe<MediumCollectionColorPaletteHighlightSpectrumColorPoints>>>;
};

type MediumCollectionColorPaletteHighlightSpectrumColorPoints = {
  readonly color: Maybe<Scalars['String']>;
  readonly point: Maybe<Scalars['Float']>;
};

type MediumCollectionColorPaletteHighlightSpectrumColorPointsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly point: InputMaybe<FloatQueryOperatorInput>;
};

type MediumCollectionColorPaletteHighlightSpectrumColorPointsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionColorPaletteHighlightSpectrumColorPointsFilterInput>;
};

type MediumCollectionColorPaletteHighlightSpectrumFilterInput = {
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly colorPoints: InputMaybe<MediumCollectionColorPaletteHighlightSpectrumColorPointsFilterListInput>;
};

type MediumCollectionColorPaletteTintBackgroundSpectrum = {
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly colorPoints: Maybe<ReadonlyArray<Maybe<MediumCollectionColorPaletteTintBackgroundSpectrumColorPoints>>>;
};

type MediumCollectionColorPaletteTintBackgroundSpectrumColorPoints = {
  readonly color: Maybe<Scalars['String']>;
  readonly point: Maybe<Scalars['Float']>;
};

type MediumCollectionColorPaletteTintBackgroundSpectrumColorPointsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly point: InputMaybe<FloatQueryOperatorInput>;
};

type MediumCollectionColorPaletteTintBackgroundSpectrumColorPointsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionColorPaletteTintBackgroundSpectrumColorPointsFilterInput>;
};

type MediumCollectionColorPaletteTintBackgroundSpectrumFilterInput = {
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly colorPoints: InputMaybe<MediumCollectionColorPaletteTintBackgroundSpectrumColorPointsFilterListInput>;
};

type MediumCollectionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumCollectionEdge>;
  readonly group: ReadonlyArray<MediumCollectionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumCollection>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumCollectionConnection_distinctArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionConnection_groupArgs = {
  field: MediumCollectionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumCollectionConnection_maxArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionConnection_minArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionConnection_sumArgs = {
  field: MediumCollectionFieldsEnum;
};

type MediumCollectionEdge = {
  readonly next: Maybe<MediumCollection>;
  readonly node: MediumCollection;
  readonly previous: Maybe<MediumCollection>;
};

type MediumCollectionFavicon = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumCollectionFaviconFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionFieldsEnum =
  | 'acceleratedMobilePagesState'
  | 'ampLogo.backgroundSize'
  | 'ampLogo.filter'
  | 'ampLogo.height'
  | 'ampLogo.imageId'
  | 'ampLogo.originalHeight'
  | 'ampLogo.originalWidth'
  | 'ampLogo.strategy'
  | 'ampLogo.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'collectionFeatures'
  | 'colorBehavior'
  | 'colorPalette.darkBackgroundSpectrum.backgroundColor'
  | 'colorPalette.darkBackgroundSpectrum.colorPoints'
  | 'colorPalette.darkBackgroundSpectrum.colorPoints.color'
  | 'colorPalette.darkBackgroundSpectrum.colorPoints.point'
  | 'colorPalette.defaultBackgroundSpectrum.backgroundColor'
  | 'colorPalette.defaultBackgroundSpectrum.colorPoints'
  | 'colorPalette.defaultBackgroundSpectrum.colorPoints.color'
  | 'colorPalette.defaultBackgroundSpectrum.colorPoints.point'
  | 'colorPalette.highlightSpectrum.backgroundColor'
  | 'colorPalette.highlightSpectrum.colorPoints'
  | 'colorPalette.highlightSpectrum.colorPoints.color'
  | 'colorPalette.highlightSpectrum.colorPoints.point'
  | 'colorPalette.tintBackgroundSpectrum.backgroundColor'
  | 'colorPalette.tintBackgroundSpectrum.colorPoints'
  | 'colorPalette.tintBackgroundSpectrum.colorPoints.color'
  | 'colorPalette.tintBackgroundSpectrum.colorPoints.point'
  | 'creatorId'
  | 'description'
  | 'domain'
  | 'facebookPageName'
  | 'favicon.backgroundSize'
  | 'favicon.filter'
  | 'favicon.height'
  | 'favicon.imageId'
  | 'favicon.originalHeight'
  | 'favicon.originalWidth'
  | 'favicon.strategy'
  | 'favicon.width'
  | 'header.alignment'
  | 'header.backgroundImage.focusPercentX'
  | 'header.backgroundImage.focusPercentY'
  | 'header.backgroundImage.id'
  | 'header.backgroundImage.originalHeight'
  | 'header.backgroundImage.originalWidth'
  | 'header.description'
  | 'header.layout'
  | 'header.logoImage.alt'
  | 'header.logoImage.id'
  | 'header.logoImage.originalHeight'
  | 'header.logoImage.originalWidth'
  | 'header.title'
  | 'id'
  | 'image.backgroundSize'
  | 'image.filter'
  | 'image.height'
  | 'image.imageId'
  | 'image.originalHeight'
  | 'image.originalWidth'
  | 'image.strategy'
  | 'image.width'
  | 'instantArticlesState'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isCurationAllowedByDefault'
  | 'isOptedIntoAurora'
  | 'lightText'
  | 'logo.backgroundSize'
  | 'logo.filter'
  | 'logo.height'
  | 'logo.imageId'
  | 'logo.originalHeight'
  | 'logo.originalWidth'
  | 'logo.strategy'
  | 'logo.width'
  | 'medium_id'
  | 'metadata.activeAt'
  | 'metadata.followerCount'
  | 'name'
  | 'navItems'
  | 'navItems.source'
  | 'navItems.tagSlug'
  | 'navItems.title'
  | 'navItems.topicId'
  | 'navItems.type'
  | 'navItems.url'
  | 'paidForDomainAt'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'polarisCoverImage.backgroundSize'
  | 'polarisCoverImage.filter'
  | 'polarisCoverImage.height'
  | 'polarisCoverImage.imageId'
  | 'polarisCoverImage.originalHeight'
  | 'polarisCoverImage.originalWidth'
  | 'polarisCoverImage.strategy'
  | 'polarisCoverImage.width'
  | 'publicEmail'
  | 'sections'
  | 'sections.collectionHeaderMetadata.alignment'
  | 'sections.collectionHeaderMetadata.backgroundImage.focusPercentX'
  | 'sections.collectionHeaderMetadata.backgroundImage.focusPercentY'
  | 'sections.collectionHeaderMetadata.backgroundImage.id'
  | 'sections.collectionHeaderMetadata.backgroundImage.originalHeight'
  | 'sections.collectionHeaderMetadata.backgroundImage.originalWidth'
  | 'sections.collectionHeaderMetadata.description'
  | 'sections.collectionHeaderMetadata.layout'
  | 'sections.collectionHeaderMetadata.logoImage.alt'
  | 'sections.collectionHeaderMetadata.logoImage.id'
  | 'sections.collectionHeaderMetadata.logoImage.originalHeight'
  | 'sections.collectionHeaderMetadata.logoImage.originalWidth'
  | 'sections.collectionHeaderMetadata.title'
  | 'sections.postListMetadata.layout'
  | 'sections.postListMetadata.number'
  | 'sections.postListMetadata.postIds'
  | 'sections.postListMetadata.sectionHeader'
  | 'sections.postListMetadata.source'
  | 'sections.type'
  | 'shortDescription'
  | 'slug'
  | 'subscriberCount'
  | 'tagline'
  | 'tags'
  | 'tintColor'
  | 'twitterUsername'
  | 'type'
  | 'virtuals.canToggleEmail'
  | 'virtuals.isEligibleForHightower'
  | 'virtuals.isEnrolledInHightower'
  | 'virtuals.isMuted'
  | 'virtuals.isSubscribed'
  | 'virtuals.isSubscribedToCollectionEmails'
  | 'virtuals.isWriter'
  | 'virtuals.permissions.canAddWriters'
  | 'virtuals.permissions.canBeAssignedAuthor'
  | 'virtuals.permissions.canCreateNewsletterV3'
  | 'virtuals.permissions.canEditOwnPosts'
  | 'virtuals.permissions.canEditPosts'
  | 'virtuals.permissions.canEnrollInHightower'
  | 'virtuals.permissions.canLockOwnPostsForMediumMembers'
  | 'virtuals.permissions.canLockPostsForMediumMembers'
  | 'virtuals.permissions.canManageAll'
  | 'virtuals.permissions.canPublish'
  | 'virtuals.permissions.canPublishAll'
  | 'virtuals.permissions.canRemove'
  | 'virtuals.permissions.canRepublish'
  | 'virtuals.permissions.canSendNewsletter'
  | 'virtuals.permissions.canSubmit'
  | 'virtuals.permissions.canViewCloaked'
  | 'virtuals.permissions.canViewLockedPosts'
  | 'virtuals.permissions.canViewNewsletterV2Stats'
  | 'virtuals.permissions.canViewStats';

type MediumCollectionFilterInput = {
  readonly acceleratedMobilePagesState: InputMaybe<IntQueryOperatorInput>;
  readonly ampLogo: InputMaybe<MediumCollectionAmpLogoFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly collectionFeatures: InputMaybe<IntQueryOperatorInput>;
  readonly colorBehavior: InputMaybe<IntQueryOperatorInput>;
  readonly colorPalette: InputMaybe<MediumCollectionColorPaletteFilterInput>;
  readonly creatorId: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly domain: InputMaybe<StringQueryOperatorInput>;
  readonly facebookPageName: InputMaybe<StringQueryOperatorInput>;
  readonly favicon: InputMaybe<MediumCollectionFaviconFilterInput>;
  readonly header: InputMaybe<MediumCollectionHeaderFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<MediumCollectionImageFilterInput>;
  readonly instantArticlesState: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isCurationAllowedByDefault: InputMaybe<BooleanQueryOperatorInput>;
  readonly isOptedIntoAurora: InputMaybe<BooleanQueryOperatorInput>;
  readonly lightText: InputMaybe<BooleanQueryOperatorInput>;
  readonly logo: InputMaybe<MediumCollectionLogoFilterInput>;
  readonly medium_id: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<MediumCollectionMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly navItems: InputMaybe<MediumCollectionNavItemsFilterListInput>;
  readonly paidForDomainAt: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly polarisCoverImage: InputMaybe<MediumCollectionPolarisCoverImageFilterInput>;
  readonly publicEmail: InputMaybe<StringQueryOperatorInput>;
  readonly sections: InputMaybe<MediumCollectionSectionsFilterListInput>;
  readonly shortDescription: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly subscriberCount: InputMaybe<IntQueryOperatorInput>;
  readonly tagline: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly tintColor: InputMaybe<StringQueryOperatorInput>;
  readonly twitterUsername: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly virtuals: InputMaybe<MediumCollectionVirtualsFilterInput>;
};

type MediumCollectionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumCollectionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MediumCollectionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumCollection>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumCollectionGroupConnection_distinctArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionGroupConnection_groupArgs = {
  field: MediumCollectionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumCollectionGroupConnection_maxArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionGroupConnection_minArgs = {
  field: MediumCollectionFieldsEnum;
};


type MediumCollectionGroupConnection_sumArgs = {
  field: MediumCollectionFieldsEnum;
};

type MediumCollectionHeader = {
  readonly alignment: Maybe<Scalars['Int']>;
  readonly backgroundImage: Maybe<MediumCollectionHeaderBackgroundImage>;
  readonly description: Maybe<Scalars['String']>;
  readonly layout: Maybe<Scalars['Int']>;
  readonly logoImage: Maybe<MediumCollectionHeaderLogoImage>;
  readonly title: Maybe<Scalars['String']>;
};

type MediumCollectionHeaderBackgroundImage = {
  readonly focusPercentX: Maybe<Scalars['Float']>;
  readonly focusPercentY: Maybe<Scalars['Float']>;
  readonly id: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
};

type MediumCollectionHeaderBackgroundImageFilterInput = {
  readonly focusPercentX: InputMaybe<FloatQueryOperatorInput>;
  readonly focusPercentY: InputMaybe<FloatQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionHeaderFilterInput = {
  readonly alignment: InputMaybe<IntQueryOperatorInput>;
  readonly backgroundImage: InputMaybe<MediumCollectionHeaderBackgroundImageFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<IntQueryOperatorInput>;
  readonly logoImage: InputMaybe<MediumCollectionHeaderLogoImageFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MediumCollectionHeaderLogoImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
};

type MediumCollectionHeaderLogoImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionImage = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumCollectionImageFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionLogo = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumCollectionLogoFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionMetadata = {
  readonly activeAt: Maybe<Scalars['Date']>;
  readonly followerCount: Maybe<Scalars['Int']>;
};


type MediumCollectionMetadata_activeAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumCollectionMetadataFilterInput = {
  readonly activeAt: InputMaybe<DateQueryOperatorInput>;
  readonly followerCount: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionNavItems = {
  readonly source: Maybe<Scalars['String']>;
  readonly tagSlug: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly topicId: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
};

type MediumCollectionNavItemsFilterInput = {
  readonly source: InputMaybe<StringQueryOperatorInput>;
  readonly tagSlug: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly topicId: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MediumCollectionNavItemsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionNavItemsFilterInput>;
};

type MediumCollectionPolarisCoverImage = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumCollectionPolarisCoverImageFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionSections = {
  readonly collectionHeaderMetadata: Maybe<MediumCollectionSectionsCollectionHeaderMetadata>;
  readonly postListMetadata: Maybe<MediumCollectionSectionsPostListMetadata>;
  readonly type: Maybe<Scalars['Int']>;
};

type MediumCollectionSectionsCollectionHeaderMetadata = {
  readonly alignment: Maybe<Scalars['Int']>;
  readonly backgroundImage: Maybe<MediumCollectionSectionsCollectionHeaderMetadataBackgroundImage>;
  readonly description: Maybe<Scalars['String']>;
  readonly layout: Maybe<Scalars['Int']>;
  readonly logoImage: Maybe<MediumCollectionSectionsCollectionHeaderMetadataLogoImage>;
  readonly title: Maybe<Scalars['String']>;
};

type MediumCollectionSectionsCollectionHeaderMetadataBackgroundImage = {
  readonly focusPercentX: Maybe<Scalars['Float']>;
  readonly focusPercentY: Maybe<Scalars['Float']>;
  readonly id: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
};

type MediumCollectionSectionsCollectionHeaderMetadataBackgroundImageFilterInput = {
  readonly focusPercentX: InputMaybe<FloatQueryOperatorInput>;
  readonly focusPercentY: InputMaybe<FloatQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionSectionsCollectionHeaderMetadataFilterInput = {
  readonly alignment: InputMaybe<IntQueryOperatorInput>;
  readonly backgroundImage: InputMaybe<MediumCollectionSectionsCollectionHeaderMetadataBackgroundImageFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<IntQueryOperatorInput>;
  readonly logoImage: InputMaybe<MediumCollectionSectionsCollectionHeaderMetadataLogoImageFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MediumCollectionSectionsCollectionHeaderMetadataLogoImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
};

type MediumCollectionSectionsCollectionHeaderMetadataLogoImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionSectionsFilterInput = {
  readonly collectionHeaderMetadata: InputMaybe<MediumCollectionSectionsCollectionHeaderMetadataFilterInput>;
  readonly postListMetadata: InputMaybe<MediumCollectionSectionsPostListMetadataFilterInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionSectionsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumCollectionSectionsFilterInput>;
};

type MediumCollectionSectionsPostListMetadata = {
  readonly layout: Maybe<Scalars['Int']>;
  readonly number: Maybe<Scalars['Int']>;
  readonly postIds: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly sectionHeader: Maybe<Scalars['String']>;
  readonly source: Maybe<Scalars['Int']>;
};

type MediumCollectionSectionsPostListMetadataFilterInput = {
  readonly layout: InputMaybe<IntQueryOperatorInput>;
  readonly number: InputMaybe<IntQueryOperatorInput>;
  readonly postIds: InputMaybe<StringQueryOperatorInput>;
  readonly sectionHeader: InputMaybe<StringQueryOperatorInput>;
  readonly source: InputMaybe<IntQueryOperatorInput>;
};

type MediumCollectionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MediumCollectionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MediumCollectionVirtuals = {
  readonly canToggleEmail: Maybe<Scalars['Boolean']>;
  readonly isEligibleForHightower: Maybe<Scalars['Boolean']>;
  readonly isEnrolledInHightower: Maybe<Scalars['Boolean']>;
  readonly isMuted: Maybe<Scalars['Boolean']>;
  readonly isSubscribed: Maybe<Scalars['Boolean']>;
  readonly isSubscribedToCollectionEmails: Maybe<Scalars['Boolean']>;
  readonly isWriter: Maybe<Scalars['Boolean']>;
  readonly permissions: Maybe<MediumCollectionVirtualsPermissions>;
};

type MediumCollectionVirtualsFilterInput = {
  readonly canToggleEmail: InputMaybe<BooleanQueryOperatorInput>;
  readonly isEligibleForHightower: InputMaybe<BooleanQueryOperatorInput>;
  readonly isEnrolledInHightower: InputMaybe<BooleanQueryOperatorInput>;
  readonly isMuted: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubscribed: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubscribedToCollectionEmails: InputMaybe<BooleanQueryOperatorInput>;
  readonly isWriter: InputMaybe<BooleanQueryOperatorInput>;
  readonly permissions: InputMaybe<MediumCollectionVirtualsPermissionsFilterInput>;
};

type MediumCollectionVirtualsPermissions = {
  readonly canAddWriters: Maybe<Scalars['Boolean']>;
  readonly canBeAssignedAuthor: Maybe<Scalars['Boolean']>;
  readonly canCreateNewsletterV3: Maybe<Scalars['Boolean']>;
  readonly canEditOwnPosts: Maybe<Scalars['Boolean']>;
  readonly canEditPosts: Maybe<Scalars['Boolean']>;
  readonly canEnrollInHightower: Maybe<Scalars['Boolean']>;
  readonly canLockOwnPostsForMediumMembers: Maybe<Scalars['Boolean']>;
  readonly canLockPostsForMediumMembers: Maybe<Scalars['Boolean']>;
  readonly canManageAll: Maybe<Scalars['Boolean']>;
  readonly canPublish: Maybe<Scalars['Boolean']>;
  readonly canPublishAll: Maybe<Scalars['Boolean']>;
  readonly canRemove: Maybe<Scalars['Boolean']>;
  readonly canRepublish: Maybe<Scalars['Boolean']>;
  readonly canSendNewsletter: Maybe<Scalars['Boolean']>;
  readonly canSubmit: Maybe<Scalars['Boolean']>;
  readonly canViewCloaked: Maybe<Scalars['Boolean']>;
  readonly canViewLockedPosts: Maybe<Scalars['Boolean']>;
  readonly canViewNewsletterV2Stats: Maybe<Scalars['Boolean']>;
  readonly canViewStats: Maybe<Scalars['Boolean']>;
};

type MediumCollectionVirtualsPermissionsFilterInput = {
  readonly canAddWriters: InputMaybe<BooleanQueryOperatorInput>;
  readonly canBeAssignedAuthor: InputMaybe<BooleanQueryOperatorInput>;
  readonly canCreateNewsletterV3: InputMaybe<BooleanQueryOperatorInput>;
  readonly canEditOwnPosts: InputMaybe<BooleanQueryOperatorInput>;
  readonly canEditPosts: InputMaybe<BooleanQueryOperatorInput>;
  readonly canEnrollInHightower: InputMaybe<BooleanQueryOperatorInput>;
  readonly canLockOwnPostsForMediumMembers: InputMaybe<BooleanQueryOperatorInput>;
  readonly canLockPostsForMediumMembers: InputMaybe<BooleanQueryOperatorInput>;
  readonly canManageAll: InputMaybe<BooleanQueryOperatorInput>;
  readonly canPublish: InputMaybe<BooleanQueryOperatorInput>;
  readonly canPublishAll: InputMaybe<BooleanQueryOperatorInput>;
  readonly canRemove: InputMaybe<BooleanQueryOperatorInput>;
  readonly canRepublish: InputMaybe<BooleanQueryOperatorInput>;
  readonly canSendNewsletter: InputMaybe<BooleanQueryOperatorInput>;
  readonly canSubmit: InputMaybe<BooleanQueryOperatorInput>;
  readonly canViewCloaked: InputMaybe<BooleanQueryOperatorInput>;
  readonly canViewLockedPosts: InputMaybe<BooleanQueryOperatorInput>;
  readonly canViewNewsletterV2Stats: InputMaybe<BooleanQueryOperatorInput>;
  readonly canViewStats: InputMaybe<BooleanQueryOperatorInput>;
};

type MediumPost = Node & {
  readonly acceptedAt: Maybe<Scalars['Int']>;
  readonly allowResponses: Maybe<Scalars['Boolean']>;
  readonly approvedHomeCollectionId: Maybe<Scalars['String']>;
  readonly audioVersionDurationSec: Maybe<Scalars['Int']>;
  readonly author: Maybe<MediumUser>;
  readonly canonicalUrl: Maybe<Scalars['String']>;
  readonly cardType: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<MediumPostContent>;
  readonly coverless: Maybe<Scalars['Boolean']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly creatorId: Maybe<Scalars['String']>;
  readonly curationEligibleAt: Maybe<Scalars['Int']>;
  readonly deletedAt: Maybe<Scalars['Int']>;
  readonly detectedLanguage: Maybe<Scalars['String']>;
  readonly displayAuthor: Maybe<Scalars['String']>;
  readonly editorialPreviewDek: Maybe<Scalars['String']>;
  readonly editorialPreviewTitle: Maybe<Scalars['String']>;
  readonly experimentalCss: Maybe<Scalars['String']>;
  readonly featureLockRequestAcceptedAt: Maybe<Scalars['Int']>;
  readonly firstPublishedAt: Maybe<Scalars['Date']>;
  readonly hasUnpublishedEdits: Maybe<Scalars['Boolean']>;
  readonly hightowerMinimumGuaranteeEndsAt: Maybe<Scalars['Int']>;
  readonly hightowerMinimumGuaranteeStartsAt: Maybe<Scalars['Int']>;
  readonly homeCollectionId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly importedPublishedAt: Maybe<Scalars['Int']>;
  readonly importedUrl: Maybe<Scalars['String']>;
  readonly inResponseToMediaResourceId: Maybe<Scalars['String']>;
  readonly inResponseToPostId: Maybe<Scalars['String']>;
  readonly inResponseToRemovedAt: Maybe<Scalars['Int']>;
  readonly internal: Internal;
  readonly isApprovedTranslation: Maybe<Scalars['Boolean']>;
  readonly isBlockedFromHightower: Maybe<Scalars['Boolean']>;
  readonly isDistributionAlertDismissed: Maybe<Scalars['Boolean']>;
  readonly isEligibleForRevenue: Maybe<Scalars['Boolean']>;
  readonly isLimitedState: Maybe<Scalars['Boolean']>;
  readonly isLockedResponse: Maybe<Scalars['Boolean']>;
  readonly isMarkedPaywallOnly: Maybe<Scalars['Boolean']>;
  readonly isNewsletter: Maybe<Scalars['Boolean']>;
  readonly isProxyPost: Maybe<Scalars['Boolean']>;
  readonly isPublishToEmail: Maybe<Scalars['Boolean']>;
  readonly isSeries: Maybe<Scalars['Boolean']>;
  readonly isShortform: Maybe<Scalars['Boolean']>;
  readonly isSubscriptionLocked: Maybe<Scalars['Boolean']>;
  readonly isSuspended: Maybe<Scalars['Boolean']>;
  readonly isTitleSynthesized: Maybe<Scalars['Boolean']>;
  readonly latestPublishedAt: Maybe<Scalars['Date']>;
  readonly latestPublishedVersion: Maybe<Scalars['String']>;
  readonly latestRev: Maybe<Scalars['Int']>;
  readonly latestVersion: Maybe<Scalars['String']>;
  readonly layerCake: Maybe<Scalars['Int']>;
  readonly license: Maybe<Scalars['Int']>;
  readonly lockedPostSource: Maybe<Scalars['Int']>;
  readonly mediumUrl: Maybe<Scalars['String']>;
  readonly medium_id: Maybe<Scalars['String']>;
  readonly migrationId: Maybe<Scalars['String']>;
  readonly mongerRequestType: Maybe<Scalars['Int']>;
  readonly newsletterId: Maybe<Scalars['String']>;
  readonly notifyFacebook: Maybe<Scalars['Boolean']>;
  readonly notifyFollowers: Maybe<Scalars['Boolean']>;
  readonly notifyTwitter: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly previewContent: Maybe<MediumPostPreviewContent>;
  readonly previewContent2: Maybe<MediumPostPreviewContent2>;
  readonly primaryTopicId: Maybe<Scalars['String']>;
  readonly proxyPostFaviconUrl: Maybe<Scalars['String']>;
  readonly proxyPostProviderName: Maybe<Scalars['String']>;
  readonly proxyPostType: Maybe<Scalars['Int']>;
  readonly responseDistribution: Maybe<Scalars['Int']>;
  readonly responseHiddenOnParentPostAt: Maybe<Scalars['Int']>;
  readonly responsesLocked: Maybe<Scalars['Boolean']>;
  readonly seoTitle: Maybe<Scalars['String']>;
  readonly sequenceId: Maybe<Scalars['String']>;
  readonly seriesLastAppendedAt: Maybe<Scalars['Date']>;
  readonly shortformType: Maybe<Scalars['Int']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly socialDek: Maybe<Scalars['String']>;
  readonly socialTitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly translationSourceCreatorId: Maybe<Scalars['String']>;
  readonly translationSourcePostId: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly uniqueSlug: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly versionId: Maybe<Scalars['String']>;
  readonly virtuals: Maybe<MediumPostVirtuals>;
  readonly visibility: Maybe<Scalars['Int']>;
  readonly vote: Maybe<Scalars['Boolean']>;
  readonly webCanonicalUrl: Maybe<Scalars['String']>;
};


type MediumPost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MediumPost_firstPublishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MediumPost_latestPublishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MediumPost_seriesLastAppendedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MediumPost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumPostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumPostEdge>;
  readonly group: ReadonlyArray<MediumPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumPostConnection_distinctArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostConnection_groupArgs = {
  field: MediumPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumPostConnection_maxArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostConnection_minArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostConnection_sumArgs = {
  field: MediumPostFieldsEnum;
};

type MediumPostContent = {
  readonly metaDescription: Maybe<Scalars['String']>;
  readonly postDisplay: Maybe<MediumPostContentPostDisplay>;
  readonly subtitle: Maybe<Scalars['String']>;
};

type MediumPostContentFilterInput = {
  readonly metaDescription: InputMaybe<StringQueryOperatorInput>;
  readonly postDisplay: InputMaybe<MediumPostContentPostDisplayFilterInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostContentPostDisplay = {
  readonly coverless: Maybe<Scalars['Boolean']>;
};

type MediumPostContentPostDisplayFilterInput = {
  readonly coverless: InputMaybe<BooleanQueryOperatorInput>;
};

type MediumPostEdge = {
  readonly next: Maybe<MediumPost>;
  readonly node: MediumPost;
  readonly previous: Maybe<MediumPost>;
};

type MediumPostFieldsEnum =
  | 'acceptedAt'
  | 'allowResponses'
  | 'approvedHomeCollectionId'
  | 'audioVersionDurationSec'
  | 'author.allowNotes'
  | 'author.backgroundImageId'
  | 'author.bio'
  | 'author.children'
  | 'author.children.children'
  | 'author.children.children.children'
  | 'author.children.children.id'
  | 'author.children.id'
  | 'author.children.internal.content'
  | 'author.children.internal.contentDigest'
  | 'author.children.internal.contentFilePath'
  | 'author.children.internal.description'
  | 'author.children.internal.fieldOwners'
  | 'author.children.internal.ignoreType'
  | 'author.children.internal.mediaType'
  | 'author.children.internal.owner'
  | 'author.children.internal.type'
  | 'author.children.parent.children'
  | 'author.children.parent.id'
  | 'author.createdAt'
  | 'author.facebookDisplayName'
  | 'author.hasCompletedProfile'
  | 'author.hasSeenIcelandOnboarding'
  | 'author.id'
  | 'author.imageId'
  | 'author.internal.content'
  | 'author.internal.contentDigest'
  | 'author.internal.contentFilePath'
  | 'author.internal.description'
  | 'author.internal.fieldOwners'
  | 'author.internal.ignoreType'
  | 'author.internal.mediaType'
  | 'author.internal.owner'
  | 'author.internal.type'
  | 'author.isMembershipTrialEligible'
  | 'author.isSuspended'
  | 'author.isWriterProgramEnrolled'
  | 'author.languageCode'
  | 'author.mediumMemberAt'
  | 'author.name'
  | 'author.optInToIceland'
  | 'author.parent.children'
  | 'author.parent.children.children'
  | 'author.parent.children.id'
  | 'author.parent.id'
  | 'author.parent.internal.content'
  | 'author.parent.internal.contentDigest'
  | 'author.parent.internal.contentFilePath'
  | 'author.parent.internal.description'
  | 'author.parent.internal.fieldOwners'
  | 'author.parent.internal.ignoreType'
  | 'author.parent.internal.mediaType'
  | 'author.parent.internal.owner'
  | 'author.parent.internal.type'
  | 'author.parent.parent.children'
  | 'author.parent.parent.id'
  | 'author.postSubscribeMembershipUpsellShownAt'
  | 'author.posts'
  | 'author.posts.acceptedAt'
  | 'author.posts.allowResponses'
  | 'author.posts.approvedHomeCollectionId'
  | 'author.posts.audioVersionDurationSec'
  | 'author.posts.author.allowNotes'
  | 'author.posts.author.backgroundImageId'
  | 'author.posts.author.bio'
  | 'author.posts.author.children'
  | 'author.posts.author.createdAt'
  | 'author.posts.author.facebookDisplayName'
  | 'author.posts.author.hasCompletedProfile'
  | 'author.posts.author.hasSeenIcelandOnboarding'
  | 'author.posts.author.id'
  | 'author.posts.author.imageId'
  | 'author.posts.author.isMembershipTrialEligible'
  | 'author.posts.author.isSuspended'
  | 'author.posts.author.isWriterProgramEnrolled'
  | 'author.posts.author.languageCode'
  | 'author.posts.author.mediumMemberAt'
  | 'author.posts.author.name'
  | 'author.posts.author.optInToIceland'
  | 'author.posts.author.postSubscribeMembershipUpsellShownAt'
  | 'author.posts.author.posts'
  | 'author.posts.author.twitterScreenName'
  | 'author.posts.author.type'
  | 'author.posts.author.userDismissableFlags'
  | 'author.posts.author.userId'
  | 'author.posts.author.username'
  | 'author.posts.canonicalUrl'
  | 'author.posts.cardType'
  | 'author.posts.children'
  | 'author.posts.children.children'
  | 'author.posts.children.id'
  | 'author.posts.content.metaDescription'
  | 'author.posts.content.subtitle'
  | 'author.posts.coverless'
  | 'author.posts.createdAt'
  | 'author.posts.creatorId'
  | 'author.posts.curationEligibleAt'
  | 'author.posts.deletedAt'
  | 'author.posts.detectedLanguage'
  | 'author.posts.displayAuthor'
  | 'author.posts.editorialPreviewDek'
  | 'author.posts.editorialPreviewTitle'
  | 'author.posts.experimentalCss'
  | 'author.posts.featureLockRequestAcceptedAt'
  | 'author.posts.firstPublishedAt'
  | 'author.posts.hasUnpublishedEdits'
  | 'author.posts.hightowerMinimumGuaranteeEndsAt'
  | 'author.posts.hightowerMinimumGuaranteeStartsAt'
  | 'author.posts.homeCollectionId'
  | 'author.posts.id'
  | 'author.posts.importedPublishedAt'
  | 'author.posts.importedUrl'
  | 'author.posts.inResponseToMediaResourceId'
  | 'author.posts.inResponseToPostId'
  | 'author.posts.inResponseToRemovedAt'
  | 'author.posts.internal.content'
  | 'author.posts.internal.contentDigest'
  | 'author.posts.internal.contentFilePath'
  | 'author.posts.internal.description'
  | 'author.posts.internal.fieldOwners'
  | 'author.posts.internal.ignoreType'
  | 'author.posts.internal.mediaType'
  | 'author.posts.internal.owner'
  | 'author.posts.internal.type'
  | 'author.posts.isApprovedTranslation'
  | 'author.posts.isBlockedFromHightower'
  | 'author.posts.isDistributionAlertDismissed'
  | 'author.posts.isEligibleForRevenue'
  | 'author.posts.isLimitedState'
  | 'author.posts.isLockedResponse'
  | 'author.posts.isMarkedPaywallOnly'
  | 'author.posts.isNewsletter'
  | 'author.posts.isProxyPost'
  | 'author.posts.isPublishToEmail'
  | 'author.posts.isSeries'
  | 'author.posts.isShortform'
  | 'author.posts.isSubscriptionLocked'
  | 'author.posts.isSuspended'
  | 'author.posts.isTitleSynthesized'
  | 'author.posts.latestPublishedAt'
  | 'author.posts.latestPublishedVersion'
  | 'author.posts.latestRev'
  | 'author.posts.latestVersion'
  | 'author.posts.layerCake'
  | 'author.posts.license'
  | 'author.posts.lockedPostSource'
  | 'author.posts.mediumUrl'
  | 'author.posts.medium_id'
  | 'author.posts.migrationId'
  | 'author.posts.mongerRequestType'
  | 'author.posts.newsletterId'
  | 'author.posts.notifyFacebook'
  | 'author.posts.notifyFollowers'
  | 'author.posts.notifyTwitter'
  | 'author.posts.parent.children'
  | 'author.posts.parent.id'
  | 'author.posts.previewContent2.isFullContent'
  | 'author.posts.previewContent2.subtitle'
  | 'author.posts.previewContent.isFullContent'
  | 'author.posts.previewContent.subtitle'
  | 'author.posts.primaryTopicId'
  | 'author.posts.proxyPostFaviconUrl'
  | 'author.posts.proxyPostProviderName'
  | 'author.posts.proxyPostType'
  | 'author.posts.responseDistribution'
  | 'author.posts.responseHiddenOnParentPostAt'
  | 'author.posts.responsesLocked'
  | 'author.posts.seoTitle'
  | 'author.posts.sequenceId'
  | 'author.posts.seriesLastAppendedAt'
  | 'author.posts.shortformType'
  | 'author.posts.slug'
  | 'author.posts.socialDek'
  | 'author.posts.socialTitle'
  | 'author.posts.title'
  | 'author.posts.translationSourceCreatorId'
  | 'author.posts.translationSourcePostId'
  | 'author.posts.type'
  | 'author.posts.uniqueSlug'
  | 'author.posts.updatedAt'
  | 'author.posts.versionId'
  | 'author.posts.virtuals.allowNotes'
  | 'author.posts.virtuals.imageCount'
  | 'author.posts.virtuals.isBookmarked'
  | 'author.posts.virtuals.isLockedPreviewOnly'
  | 'author.posts.virtuals.metaDescription'
  | 'author.posts.virtuals.noIndex'
  | 'author.posts.virtuals.publishedInCount'
  | 'author.posts.virtuals.readingList'
  | 'author.posts.virtuals.readingTime'
  | 'author.posts.virtuals.recommends'
  | 'author.posts.virtuals.responsesCreatedCount'
  | 'author.posts.virtuals.sectionCount'
  | 'author.posts.virtuals.socialRecommendsCount'
  | 'author.posts.virtuals.statusForCollection'
  | 'author.posts.virtuals.subtitle'
  | 'author.posts.virtuals.tags'
  | 'author.posts.virtuals.topics'
  | 'author.posts.virtuals.totalClapCount'
  | 'author.posts.virtuals.wordCount'
  | 'author.posts.visibility'
  | 'author.posts.vote'
  | 'author.posts.webCanonicalUrl'
  | 'author.twitterScreenName'
  | 'author.type'
  | 'author.userDismissableFlags'
  | 'author.userId'
  | 'author.username'
  | 'canonicalUrl'
  | 'cardType'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content.metaDescription'
  | 'content.postDisplay.coverless'
  | 'content.subtitle'
  | 'coverless'
  | 'createdAt'
  | 'creatorId'
  | 'curationEligibleAt'
  | 'deletedAt'
  | 'detectedLanguage'
  | 'displayAuthor'
  | 'editorialPreviewDek'
  | 'editorialPreviewTitle'
  | 'experimentalCss'
  | 'featureLockRequestAcceptedAt'
  | 'firstPublishedAt'
  | 'hasUnpublishedEdits'
  | 'hightowerMinimumGuaranteeEndsAt'
  | 'hightowerMinimumGuaranteeStartsAt'
  | 'homeCollectionId'
  | 'id'
  | 'importedPublishedAt'
  | 'importedUrl'
  | 'inResponseToMediaResourceId'
  | 'inResponseToPostId'
  | 'inResponseToRemovedAt'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isApprovedTranslation'
  | 'isBlockedFromHightower'
  | 'isDistributionAlertDismissed'
  | 'isEligibleForRevenue'
  | 'isLimitedState'
  | 'isLockedResponse'
  | 'isMarkedPaywallOnly'
  | 'isNewsletter'
  | 'isProxyPost'
  | 'isPublishToEmail'
  | 'isSeries'
  | 'isShortform'
  | 'isSubscriptionLocked'
  | 'isSuspended'
  | 'isTitleSynthesized'
  | 'latestPublishedAt'
  | 'latestPublishedVersion'
  | 'latestRev'
  | 'latestVersion'
  | 'layerCake'
  | 'license'
  | 'lockedPostSource'
  | 'mediumUrl'
  | 'medium_id'
  | 'migrationId'
  | 'mongerRequestType'
  | 'newsletterId'
  | 'notifyFacebook'
  | 'notifyFollowers'
  | 'notifyTwitter'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'previewContent2.bodyModel.paragraphs'
  | 'previewContent2.bodyModel.paragraphs.hasDropCap'
  | 'previewContent2.bodyModel.paragraphs.layout'
  | 'previewContent2.bodyModel.paragraphs.markups'
  | 'previewContent2.bodyModel.paragraphs.name'
  | 'previewContent2.bodyModel.paragraphs.text'
  | 'previewContent2.bodyModel.paragraphs.type'
  | 'previewContent2.bodyModel.sections'
  | 'previewContent2.bodyModel.sections.name'
  | 'previewContent2.bodyModel.sections.startIndex'
  | 'previewContent2.isFullContent'
  | 'previewContent2.subtitle'
  | 'previewContent.bodyModel.paragraphs'
  | 'previewContent.bodyModel.paragraphs.alignment'
  | 'previewContent.bodyModel.paragraphs.hasDropCap'
  | 'previewContent.bodyModel.paragraphs.layout'
  | 'previewContent.bodyModel.paragraphs.markups'
  | 'previewContent.bodyModel.paragraphs.name'
  | 'previewContent.bodyModel.paragraphs.text'
  | 'previewContent.bodyModel.paragraphs.type'
  | 'previewContent.bodyModel.sections'
  | 'previewContent.bodyModel.sections.startIndex'
  | 'previewContent.isFullContent'
  | 'previewContent.subtitle'
  | 'primaryTopicId'
  | 'proxyPostFaviconUrl'
  | 'proxyPostProviderName'
  | 'proxyPostType'
  | 'responseDistribution'
  | 'responseHiddenOnParentPostAt'
  | 'responsesLocked'
  | 'seoTitle'
  | 'sequenceId'
  | 'seriesLastAppendedAt'
  | 'shortformType'
  | 'slug'
  | 'socialDek'
  | 'socialTitle'
  | 'title'
  | 'translationSourceCreatorId'
  | 'translationSourcePostId'
  | 'type'
  | 'uniqueSlug'
  | 'updatedAt'
  | 'versionId'
  | 'virtuals.allowNotes'
  | 'virtuals.imageCount'
  | 'virtuals.isBookmarked'
  | 'virtuals.isLockedPreviewOnly'
  | 'virtuals.links.entries'
  | 'virtuals.links.entries.alts'
  | 'virtuals.links.entries.httpStatus'
  | 'virtuals.links.entries.url'
  | 'virtuals.links.generatedAt'
  | 'virtuals.links.version'
  | 'virtuals.metaDescription'
  | 'virtuals.noIndex'
  | 'virtuals.previewImage.backgroundSize'
  | 'virtuals.previewImage.filter'
  | 'virtuals.previewImage.height'
  | 'virtuals.previewImage.imageId'
  | 'virtuals.previewImage.originalHeight'
  | 'virtuals.previewImage.originalWidth'
  | 'virtuals.previewImage.strategy'
  | 'virtuals.previewImage.width'
  | 'virtuals.publishedInCount'
  | 'virtuals.readingList'
  | 'virtuals.readingTime'
  | 'virtuals.recommends'
  | 'virtuals.responsesCreatedCount'
  | 'virtuals.sectionCount'
  | 'virtuals.socialRecommendsCount'
  | 'virtuals.statusForCollection'
  | 'virtuals.subtitle'
  | 'virtuals.tags'
  | 'virtuals.tags.metadata.postCount'
  | 'virtuals.tags.name'
  | 'virtuals.tags.postCount'
  | 'virtuals.tags.slug'
  | 'virtuals.tags.type'
  | 'virtuals.topics'
  | 'virtuals.topics.createdAt'
  | 'virtuals.topics.deletedAt'
  | 'virtuals.topics.description'
  | 'virtuals.topics.image.id'
  | 'virtuals.topics.image.originalHeight'
  | 'virtuals.topics.image.originalWidth'
  | 'virtuals.topics.name'
  | 'virtuals.topics.seoTitle'
  | 'virtuals.topics.slug'
  | 'virtuals.topics.topicId'
  | 'virtuals.topics.type'
  | 'virtuals.topics.visibility'
  | 'virtuals.totalClapCount'
  | 'virtuals.wordCount'
  | 'visibility'
  | 'vote'
  | 'webCanonicalUrl';

type MediumPostFilterInput = {
  readonly acceptedAt: InputMaybe<IntQueryOperatorInput>;
  readonly allowResponses: InputMaybe<BooleanQueryOperatorInput>;
  readonly approvedHomeCollectionId: InputMaybe<StringQueryOperatorInput>;
  readonly audioVersionDurationSec: InputMaybe<IntQueryOperatorInput>;
  readonly author: InputMaybe<MediumUserFilterInput>;
  readonly canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  readonly cardType: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<MediumPostContentFilterInput>;
  readonly coverless: InputMaybe<BooleanQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly creatorId: InputMaybe<StringQueryOperatorInput>;
  readonly curationEligibleAt: InputMaybe<IntQueryOperatorInput>;
  readonly deletedAt: InputMaybe<IntQueryOperatorInput>;
  readonly detectedLanguage: InputMaybe<StringQueryOperatorInput>;
  readonly displayAuthor: InputMaybe<StringQueryOperatorInput>;
  readonly editorialPreviewDek: InputMaybe<StringQueryOperatorInput>;
  readonly editorialPreviewTitle: InputMaybe<StringQueryOperatorInput>;
  readonly experimentalCss: InputMaybe<StringQueryOperatorInput>;
  readonly featureLockRequestAcceptedAt: InputMaybe<IntQueryOperatorInput>;
  readonly firstPublishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly hasUnpublishedEdits: InputMaybe<BooleanQueryOperatorInput>;
  readonly hightowerMinimumGuaranteeEndsAt: InputMaybe<IntQueryOperatorInput>;
  readonly hightowerMinimumGuaranteeStartsAt: InputMaybe<IntQueryOperatorInput>;
  readonly homeCollectionId: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly importedPublishedAt: InputMaybe<IntQueryOperatorInput>;
  readonly importedUrl: InputMaybe<StringQueryOperatorInput>;
  readonly inResponseToMediaResourceId: InputMaybe<StringQueryOperatorInput>;
  readonly inResponseToPostId: InputMaybe<StringQueryOperatorInput>;
  readonly inResponseToRemovedAt: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isApprovedTranslation: InputMaybe<BooleanQueryOperatorInput>;
  readonly isBlockedFromHightower: InputMaybe<BooleanQueryOperatorInput>;
  readonly isDistributionAlertDismissed: InputMaybe<BooleanQueryOperatorInput>;
  readonly isEligibleForRevenue: InputMaybe<BooleanQueryOperatorInput>;
  readonly isLimitedState: InputMaybe<BooleanQueryOperatorInput>;
  readonly isLockedResponse: InputMaybe<BooleanQueryOperatorInput>;
  readonly isMarkedPaywallOnly: InputMaybe<BooleanQueryOperatorInput>;
  readonly isNewsletter: InputMaybe<BooleanQueryOperatorInput>;
  readonly isProxyPost: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPublishToEmail: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSeries: InputMaybe<BooleanQueryOperatorInput>;
  readonly isShortform: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSubscriptionLocked: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSuspended: InputMaybe<BooleanQueryOperatorInput>;
  readonly isTitleSynthesized: InputMaybe<BooleanQueryOperatorInput>;
  readonly latestPublishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly latestPublishedVersion: InputMaybe<StringQueryOperatorInput>;
  readonly latestRev: InputMaybe<IntQueryOperatorInput>;
  readonly latestVersion: InputMaybe<StringQueryOperatorInput>;
  readonly layerCake: InputMaybe<IntQueryOperatorInput>;
  readonly license: InputMaybe<IntQueryOperatorInput>;
  readonly lockedPostSource: InputMaybe<IntQueryOperatorInput>;
  readonly mediumUrl: InputMaybe<StringQueryOperatorInput>;
  readonly medium_id: InputMaybe<StringQueryOperatorInput>;
  readonly migrationId: InputMaybe<StringQueryOperatorInput>;
  readonly mongerRequestType: InputMaybe<IntQueryOperatorInput>;
  readonly newsletterId: InputMaybe<StringQueryOperatorInput>;
  readonly notifyFacebook: InputMaybe<BooleanQueryOperatorInput>;
  readonly notifyFollowers: InputMaybe<BooleanQueryOperatorInput>;
  readonly notifyTwitter: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly previewContent: InputMaybe<MediumPostPreviewContentFilterInput>;
  readonly previewContent2: InputMaybe<MediumPostPreviewContent2FilterInput>;
  readonly primaryTopicId: InputMaybe<StringQueryOperatorInput>;
  readonly proxyPostFaviconUrl: InputMaybe<StringQueryOperatorInput>;
  readonly proxyPostProviderName: InputMaybe<StringQueryOperatorInput>;
  readonly proxyPostType: InputMaybe<IntQueryOperatorInput>;
  readonly responseDistribution: InputMaybe<IntQueryOperatorInput>;
  readonly responseHiddenOnParentPostAt: InputMaybe<IntQueryOperatorInput>;
  readonly responsesLocked: InputMaybe<BooleanQueryOperatorInput>;
  readonly seoTitle: InputMaybe<StringQueryOperatorInput>;
  readonly sequenceId: InputMaybe<StringQueryOperatorInput>;
  readonly seriesLastAppendedAt: InputMaybe<DateQueryOperatorInput>;
  readonly shortformType: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly socialDek: InputMaybe<StringQueryOperatorInput>;
  readonly socialTitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly translationSourceCreatorId: InputMaybe<StringQueryOperatorInput>;
  readonly translationSourcePostId: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uniqueSlug: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly versionId: InputMaybe<StringQueryOperatorInput>;
  readonly virtuals: InputMaybe<MediumPostVirtualsFilterInput>;
  readonly visibility: InputMaybe<IntQueryOperatorInput>;
  readonly vote: InputMaybe<BooleanQueryOperatorInput>;
  readonly webCanonicalUrl: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostFilterInput>;
};

type MediumPostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumPostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MediumPostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumPost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumPostGroupConnection_distinctArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostGroupConnection_groupArgs = {
  field: MediumPostFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumPostGroupConnection_maxArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostGroupConnection_minArgs = {
  field: MediumPostFieldsEnum;
};


type MediumPostGroupConnection_sumArgs = {
  field: MediumPostFieldsEnum;
};

type MediumPostPreviewContent = {
  readonly bodyModel: Maybe<MediumPostPreviewContentBodyModel>;
  readonly isFullContent: Maybe<Scalars['Boolean']>;
  readonly subtitle: Maybe<Scalars['String']>;
};

type MediumPostPreviewContent2 = {
  readonly bodyModel: Maybe<MediumPostPreviewContent2BodyModel>;
  readonly isFullContent: Maybe<Scalars['Boolean']>;
  readonly subtitle: Maybe<Scalars['String']>;
};

type MediumPostPreviewContent2BodyModel = {
  readonly paragraphs: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContent2BodyModelParagraphs>>>;
  readonly sections: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContent2BodyModelSections>>>;
};

type MediumPostPreviewContent2BodyModelFilterInput = {
  readonly paragraphs: InputMaybe<MediumPostPreviewContent2BodyModelParagraphsFilterListInput>;
  readonly sections: InputMaybe<MediumPostPreviewContent2BodyModelSectionsFilterListInput>;
};

type MediumPostPreviewContent2BodyModelParagraphs = {
  readonly hasDropCap: Maybe<Scalars['Boolean']>;
  readonly layout: Maybe<Scalars['Int']>;
  readonly markups: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContent2BodyModelParagraphsMarkups>>>;
  readonly metadata: Maybe<MediumPostPreviewContent2BodyModelParagraphsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
};

type MediumPostPreviewContent2BodyModelParagraphsFilterInput = {
  readonly hasDropCap: InputMaybe<BooleanQueryOperatorInput>;
  readonly layout: InputMaybe<IntQueryOperatorInput>;
  readonly markups: InputMaybe<MediumPostPreviewContent2BodyModelParagraphsMarkupsFilterListInput>;
  readonly metadata: InputMaybe<MediumPostPreviewContent2BodyModelParagraphsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostPreviewContent2BodyModelParagraphsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContent2BodyModelParagraphsFilterInput>;
};

type MediumPostPreviewContent2BodyModelParagraphsMarkups = {
  readonly anchorType: Maybe<Scalars['Int']>;
  readonly end: Maybe<Scalars['Int']>;
  readonly href: Maybe<Scalars['String']>;
  readonly rel: Maybe<Scalars['String']>;
  readonly start: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
  readonly userId: Maybe<Scalars['String']>;
};

type MediumPostPreviewContent2BodyModelParagraphsMarkupsFilterInput = {
  readonly anchorType: InputMaybe<IntQueryOperatorInput>;
  readonly end: InputMaybe<IntQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly rel: InputMaybe<StringQueryOperatorInput>;
  readonly start: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
  readonly userId: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostPreviewContent2BodyModelParagraphsMarkupsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContent2BodyModelParagraphsMarkupsFilterInput>;
};

type MediumPostPreviewContent2BodyModelParagraphsMetadata = {
  readonly id: Maybe<Scalars['String']>;
  readonly isFeatured: Maybe<Scalars['Boolean']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly unsplashPhotoId: Maybe<Scalars['String']>;
};

type MediumPostPreviewContent2BodyModelParagraphsMetadataFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly isFeatured: InputMaybe<BooleanQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly unsplashPhotoId: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostPreviewContent2BodyModelSections = {
  readonly name: Maybe<Scalars['String']>;
  readonly startIndex: Maybe<Scalars['Int']>;
};

type MediumPostPreviewContent2BodyModelSectionsFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly startIndex: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostPreviewContent2BodyModelSectionsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContent2BodyModelSectionsFilterInput>;
};

type MediumPostPreviewContent2FilterInput = {
  readonly bodyModel: InputMaybe<MediumPostPreviewContent2BodyModelFilterInput>;
  readonly isFullContent: InputMaybe<BooleanQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostPreviewContentBodyModel = {
  readonly paragraphs: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContentBodyModelParagraphs>>>;
  readonly sections: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContentBodyModelSections>>>;
};

type MediumPostPreviewContentBodyModelFilterInput = {
  readonly paragraphs: InputMaybe<MediumPostPreviewContentBodyModelParagraphsFilterListInput>;
  readonly sections: InputMaybe<MediumPostPreviewContentBodyModelSectionsFilterListInput>;
};

type MediumPostPreviewContentBodyModelParagraphs = {
  readonly alignment: Maybe<Scalars['Int']>;
  readonly hasDropCap: Maybe<Scalars['Boolean']>;
  readonly layout: Maybe<Scalars['Int']>;
  readonly markups: Maybe<ReadonlyArray<Maybe<MediumPostPreviewContentBodyModelParagraphsMarkups>>>;
  readonly metadata: Maybe<MediumPostPreviewContentBodyModelParagraphsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
};

type MediumPostPreviewContentBodyModelParagraphsFilterInput = {
  readonly alignment: InputMaybe<IntQueryOperatorInput>;
  readonly hasDropCap: InputMaybe<BooleanQueryOperatorInput>;
  readonly layout: InputMaybe<IntQueryOperatorInput>;
  readonly markups: InputMaybe<MediumPostPreviewContentBodyModelParagraphsMarkupsFilterListInput>;
  readonly metadata: InputMaybe<MediumPostPreviewContentBodyModelParagraphsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostPreviewContentBodyModelParagraphsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContentBodyModelParagraphsFilterInput>;
};

type MediumPostPreviewContentBodyModelParagraphsMarkups = {
  readonly anchorType: Maybe<Scalars['Int']>;
  readonly end: Maybe<Scalars['Int']>;
  readonly href: Maybe<Scalars['String']>;
  readonly rel: Maybe<Scalars['String']>;
  readonly start: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['Int']>;
};

type MediumPostPreviewContentBodyModelParagraphsMarkupsFilterInput = {
  readonly anchorType: InputMaybe<IntQueryOperatorInput>;
  readonly end: InputMaybe<IntQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly rel: InputMaybe<StringQueryOperatorInput>;
  readonly start: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostPreviewContentBodyModelParagraphsMarkupsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContentBodyModelParagraphsMarkupsFilterInput>;
};

type MediumPostPreviewContentBodyModelParagraphsMetadata = {
  readonly alt: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly isFeatured: Maybe<Scalars['Boolean']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly unsplashPhotoId: Maybe<Scalars['String']>;
};

type MediumPostPreviewContentBodyModelParagraphsMetadataFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly isFeatured: InputMaybe<BooleanQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly unsplashPhotoId: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostPreviewContentBodyModelSections = {
  readonly startIndex: Maybe<Scalars['Int']>;
};

type MediumPostPreviewContentBodyModelSectionsFilterInput = {
  readonly startIndex: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostPreviewContentBodyModelSectionsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostPreviewContentBodyModelSectionsFilterInput>;
};

type MediumPostPreviewContentFilterInput = {
  readonly bodyModel: InputMaybe<MediumPostPreviewContentBodyModelFilterInput>;
  readonly isFullContent: InputMaybe<BooleanQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MediumPostFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MediumPostVirtuals = {
  readonly allowNotes: Maybe<Scalars['Boolean']>;
  readonly imageCount: Maybe<Scalars['Int']>;
  readonly isBookmarked: Maybe<Scalars['Boolean']>;
  readonly isLockedPreviewOnly: Maybe<Scalars['Boolean']>;
  readonly links: Maybe<MediumPostVirtualsLinks>;
  readonly metaDescription: Maybe<Scalars['String']>;
  readonly noIndex: Maybe<Scalars['Boolean']>;
  readonly previewImage: Maybe<MediumPostVirtualsPreviewImage>;
  readonly publishedInCount: Maybe<Scalars['Int']>;
  readonly readingList: Maybe<Scalars['Int']>;
  readonly readingTime: Maybe<Scalars['Float']>;
  readonly recommends: Maybe<Scalars['Int']>;
  readonly responsesCreatedCount: Maybe<Scalars['Int']>;
  readonly sectionCount: Maybe<Scalars['Int']>;
  readonly socialRecommendsCount: Maybe<Scalars['Int']>;
  readonly statusForCollection: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<MediumPostVirtualsTags>>>;
  readonly topics: Maybe<ReadonlyArray<Maybe<MediumPostVirtualsTopics>>>;
  readonly totalClapCount: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<Scalars['Int']>;
};

type MediumPostVirtualsFilterInput = {
  readonly allowNotes: InputMaybe<BooleanQueryOperatorInput>;
  readonly imageCount: InputMaybe<IntQueryOperatorInput>;
  readonly isBookmarked: InputMaybe<BooleanQueryOperatorInput>;
  readonly isLockedPreviewOnly: InputMaybe<BooleanQueryOperatorInput>;
  readonly links: InputMaybe<MediumPostVirtualsLinksFilterInput>;
  readonly metaDescription: InputMaybe<StringQueryOperatorInput>;
  readonly noIndex: InputMaybe<BooleanQueryOperatorInput>;
  readonly previewImage: InputMaybe<MediumPostVirtualsPreviewImageFilterInput>;
  readonly publishedInCount: InputMaybe<IntQueryOperatorInput>;
  readonly readingList: InputMaybe<IntQueryOperatorInput>;
  readonly readingTime: InputMaybe<FloatQueryOperatorInput>;
  readonly recommends: InputMaybe<IntQueryOperatorInput>;
  readonly responsesCreatedCount: InputMaybe<IntQueryOperatorInput>;
  readonly sectionCount: InputMaybe<IntQueryOperatorInput>;
  readonly socialRecommendsCount: InputMaybe<IntQueryOperatorInput>;
  readonly statusForCollection: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<MediumPostVirtualsTagsFilterListInput>;
  readonly topics: InputMaybe<MediumPostVirtualsTopicsFilterListInput>;
  readonly totalClapCount: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostVirtualsLinks = {
  readonly entries: Maybe<ReadonlyArray<Maybe<MediumPostVirtualsLinksEntries>>>;
  readonly generatedAt: Maybe<Scalars['Date']>;
  readonly version: Maybe<Scalars['String']>;
};


type MediumPostVirtualsLinks_generatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumPostVirtualsLinksEntries = {
  readonly alts: Maybe<ReadonlyArray<Maybe<MediumPostVirtualsLinksEntriesAlts>>>;
  readonly httpStatus: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
};

type MediumPostVirtualsLinksEntriesAlts = {
  readonly type: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
};

type MediumPostVirtualsLinksEntriesAltsFilterInput = {
  readonly type: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostVirtualsLinksEntriesAltsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostVirtualsLinksEntriesAltsFilterInput>;
};

type MediumPostVirtualsLinksEntriesFilterInput = {
  readonly alts: InputMaybe<MediumPostVirtualsLinksEntriesAltsFilterListInput>;
  readonly httpStatus: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostVirtualsLinksEntriesFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostVirtualsLinksEntriesFilterInput>;
};

type MediumPostVirtualsLinksFilterInput = {
  readonly entries: InputMaybe<MediumPostVirtualsLinksEntriesFilterListInput>;
  readonly generatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostVirtualsPreviewImage = {
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly imageId: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly strategy: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type MediumPostVirtualsPreviewImageFilterInput = {
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly strategy: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostVirtualsTags = {
  readonly metadata: Maybe<MediumPostVirtualsTagsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly postCount: Maybe<Scalars['Int']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type MediumPostVirtualsTagsFilterInput = {
  readonly metadata: InputMaybe<MediumPostVirtualsTagsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostVirtualsTagsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostVirtualsTagsFilterInput>;
};

type MediumPostVirtualsTagsMetadata = {
  readonly coverImage: Maybe<MediumPostVirtualsTagsMetadataCoverImage>;
  readonly postCount: Maybe<Scalars['Int']>;
};

type MediumPostVirtualsTagsMetadataCoverImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly backgroundSize: Maybe<Scalars['String']>;
  readonly externalSrc: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['String']>;
  readonly focusPercentX: Maybe<Scalars['Int']>;
  readonly focusPercentY: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly isFeatured: Maybe<Scalars['Boolean']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
  readonly repairedAt: Maybe<Scalars['Int']>;
  readonly unsplashPhotoId: Maybe<Scalars['String']>;
};

type MediumPostVirtualsTagsMetadataCoverImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly backgroundSize: InputMaybe<StringQueryOperatorInput>;
  readonly externalSrc: InputMaybe<StringQueryOperatorInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly focusPercentX: InputMaybe<IntQueryOperatorInput>;
  readonly focusPercentY: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly isFeatured: InputMaybe<BooleanQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
  readonly repairedAt: InputMaybe<IntQueryOperatorInput>;
  readonly unsplashPhotoId: InputMaybe<StringQueryOperatorInput>;
};

type MediumPostVirtualsTagsMetadataFilterInput = {
  readonly coverImage: InputMaybe<MediumPostVirtualsTagsMetadataCoverImageFilterInput>;
  readonly postCount: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostVirtualsTopics = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly deletedAt: Maybe<Scalars['Int']>;
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<MediumPostVirtualsTopicsImage>;
  readonly name: Maybe<Scalars['String']>;
  readonly seoTitle: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly topicId: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly visibility: Maybe<Scalars['Int']>;
};


type MediumPostVirtualsTopics_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumPostVirtualsTopicsFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly deletedAt: InputMaybe<IntQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<MediumPostVirtualsTopicsImageFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly seoTitle: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly topicId: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly visibility: InputMaybe<IntQueryOperatorInput>;
};

type MediumPostVirtualsTopicsFilterListInput = {
  readonly elemMatch: InputMaybe<MediumPostVirtualsTopicsFilterInput>;
};

type MediumPostVirtualsTopicsImage = {
  readonly id: Maybe<Scalars['String']>;
  readonly originalHeight: Maybe<Scalars['Int']>;
  readonly originalWidth: Maybe<Scalars['Int']>;
};

type MediumPostVirtualsTopicsImageFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly originalHeight: InputMaybe<IntQueryOperatorInput>;
  readonly originalWidth: InputMaybe<IntQueryOperatorInput>;
};

type MediumUser = Node & {
  readonly allowNotes: Maybe<Scalars['Int']>;
  readonly backgroundImageId: Maybe<Scalars['String']>;
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly facebookDisplayName: Maybe<Scalars['String']>;
  readonly hasCompletedProfile: Maybe<Scalars['Boolean']>;
  readonly hasSeenIcelandOnboarding: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly imageId: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly isMembershipTrialEligible: Maybe<Scalars['Boolean']>;
  readonly isSuspended: Maybe<Scalars['Boolean']>;
  readonly isWriterProgramEnrolled: Maybe<Scalars['Boolean']>;
  readonly languageCode: Maybe<Scalars['String']>;
  readonly mediumMemberAt: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly optInToIceland: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly postSubscribeMembershipUpsellShownAt: Maybe<Scalars['Int']>;
  readonly posts: Maybe<ReadonlyArray<Maybe<MediumPost>>>;
  readonly twitterScreenName: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly userDismissableFlags: Maybe<ReadonlyArray<Maybe<Scalars['Int']>>>;
  readonly userId: Maybe<Scalars['String']>;
  readonly username: Maybe<Scalars['String']>;
};


type MediumUser_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MediumUserConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumUserEdge>;
  readonly group: ReadonlyArray<MediumUserGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumUser>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumUserConnection_distinctArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserConnection_groupArgs = {
  field: MediumUserFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumUserConnection_maxArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserConnection_minArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserConnection_sumArgs = {
  field: MediumUserFieldsEnum;
};

type MediumUserEdge = {
  readonly next: Maybe<MediumUser>;
  readonly node: MediumUser;
  readonly previous: Maybe<MediumUser>;
};

type MediumUserFieldsEnum =
  | 'allowNotes'
  | 'backgroundImageId'
  | 'bio'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'facebookDisplayName'
  | 'hasCompletedProfile'
  | 'hasSeenIcelandOnboarding'
  | 'id'
  | 'imageId'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'isMembershipTrialEligible'
  | 'isSuspended'
  | 'isWriterProgramEnrolled'
  | 'languageCode'
  | 'mediumMemberAt'
  | 'name'
  | 'optInToIceland'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'postSubscribeMembershipUpsellShownAt'
  | 'posts'
  | 'posts.acceptedAt'
  | 'posts.allowResponses'
  | 'posts.approvedHomeCollectionId'
  | 'posts.audioVersionDurationSec'
  | 'posts.author.allowNotes'
  | 'posts.author.backgroundImageId'
  | 'posts.author.bio'
  | 'posts.author.children'
  | 'posts.author.children.children'
  | 'posts.author.children.id'
  | 'posts.author.createdAt'
  | 'posts.author.facebookDisplayName'
  | 'posts.author.hasCompletedProfile'
  | 'posts.author.hasSeenIcelandOnboarding'
  | 'posts.author.id'
  | 'posts.author.imageId'
  | 'posts.author.internal.content'
  | 'posts.author.internal.contentDigest'
  | 'posts.author.internal.contentFilePath'
  | 'posts.author.internal.description'
  | 'posts.author.internal.fieldOwners'
  | 'posts.author.internal.ignoreType'
  | 'posts.author.internal.mediaType'
  | 'posts.author.internal.owner'
  | 'posts.author.internal.type'
  | 'posts.author.isMembershipTrialEligible'
  | 'posts.author.isSuspended'
  | 'posts.author.isWriterProgramEnrolled'
  | 'posts.author.languageCode'
  | 'posts.author.mediumMemberAt'
  | 'posts.author.name'
  | 'posts.author.optInToIceland'
  | 'posts.author.parent.children'
  | 'posts.author.parent.id'
  | 'posts.author.postSubscribeMembershipUpsellShownAt'
  | 'posts.author.posts'
  | 'posts.author.posts.acceptedAt'
  | 'posts.author.posts.allowResponses'
  | 'posts.author.posts.approvedHomeCollectionId'
  | 'posts.author.posts.audioVersionDurationSec'
  | 'posts.author.posts.canonicalUrl'
  | 'posts.author.posts.cardType'
  | 'posts.author.posts.children'
  | 'posts.author.posts.coverless'
  | 'posts.author.posts.createdAt'
  | 'posts.author.posts.creatorId'
  | 'posts.author.posts.curationEligibleAt'
  | 'posts.author.posts.deletedAt'
  | 'posts.author.posts.detectedLanguage'
  | 'posts.author.posts.displayAuthor'
  | 'posts.author.posts.editorialPreviewDek'
  | 'posts.author.posts.editorialPreviewTitle'
  | 'posts.author.posts.experimentalCss'
  | 'posts.author.posts.featureLockRequestAcceptedAt'
  | 'posts.author.posts.firstPublishedAt'
  | 'posts.author.posts.hasUnpublishedEdits'
  | 'posts.author.posts.hightowerMinimumGuaranteeEndsAt'
  | 'posts.author.posts.hightowerMinimumGuaranteeStartsAt'
  | 'posts.author.posts.homeCollectionId'
  | 'posts.author.posts.id'
  | 'posts.author.posts.importedPublishedAt'
  | 'posts.author.posts.importedUrl'
  | 'posts.author.posts.inResponseToMediaResourceId'
  | 'posts.author.posts.inResponseToPostId'
  | 'posts.author.posts.inResponseToRemovedAt'
  | 'posts.author.posts.isApprovedTranslation'
  | 'posts.author.posts.isBlockedFromHightower'
  | 'posts.author.posts.isDistributionAlertDismissed'
  | 'posts.author.posts.isEligibleForRevenue'
  | 'posts.author.posts.isLimitedState'
  | 'posts.author.posts.isLockedResponse'
  | 'posts.author.posts.isMarkedPaywallOnly'
  | 'posts.author.posts.isNewsletter'
  | 'posts.author.posts.isProxyPost'
  | 'posts.author.posts.isPublishToEmail'
  | 'posts.author.posts.isSeries'
  | 'posts.author.posts.isShortform'
  | 'posts.author.posts.isSubscriptionLocked'
  | 'posts.author.posts.isSuspended'
  | 'posts.author.posts.isTitleSynthesized'
  | 'posts.author.posts.latestPublishedAt'
  | 'posts.author.posts.latestPublishedVersion'
  | 'posts.author.posts.latestRev'
  | 'posts.author.posts.latestVersion'
  | 'posts.author.posts.layerCake'
  | 'posts.author.posts.license'
  | 'posts.author.posts.lockedPostSource'
  | 'posts.author.posts.mediumUrl'
  | 'posts.author.posts.medium_id'
  | 'posts.author.posts.migrationId'
  | 'posts.author.posts.mongerRequestType'
  | 'posts.author.posts.newsletterId'
  | 'posts.author.posts.notifyFacebook'
  | 'posts.author.posts.notifyFollowers'
  | 'posts.author.posts.notifyTwitter'
  | 'posts.author.posts.primaryTopicId'
  | 'posts.author.posts.proxyPostFaviconUrl'
  | 'posts.author.posts.proxyPostProviderName'
  | 'posts.author.posts.proxyPostType'
  | 'posts.author.posts.responseDistribution'
  | 'posts.author.posts.responseHiddenOnParentPostAt'
  | 'posts.author.posts.responsesLocked'
  | 'posts.author.posts.seoTitle'
  | 'posts.author.posts.sequenceId'
  | 'posts.author.posts.seriesLastAppendedAt'
  | 'posts.author.posts.shortformType'
  | 'posts.author.posts.slug'
  | 'posts.author.posts.socialDek'
  | 'posts.author.posts.socialTitle'
  | 'posts.author.posts.title'
  | 'posts.author.posts.translationSourceCreatorId'
  | 'posts.author.posts.translationSourcePostId'
  | 'posts.author.posts.type'
  | 'posts.author.posts.uniqueSlug'
  | 'posts.author.posts.updatedAt'
  | 'posts.author.posts.versionId'
  | 'posts.author.posts.visibility'
  | 'posts.author.posts.vote'
  | 'posts.author.posts.webCanonicalUrl'
  | 'posts.author.twitterScreenName'
  | 'posts.author.type'
  | 'posts.author.userDismissableFlags'
  | 'posts.author.userId'
  | 'posts.author.username'
  | 'posts.canonicalUrl'
  | 'posts.cardType'
  | 'posts.children'
  | 'posts.children.children'
  | 'posts.children.children.children'
  | 'posts.children.children.id'
  | 'posts.children.id'
  | 'posts.children.internal.content'
  | 'posts.children.internal.contentDigest'
  | 'posts.children.internal.contentFilePath'
  | 'posts.children.internal.description'
  | 'posts.children.internal.fieldOwners'
  | 'posts.children.internal.ignoreType'
  | 'posts.children.internal.mediaType'
  | 'posts.children.internal.owner'
  | 'posts.children.internal.type'
  | 'posts.children.parent.children'
  | 'posts.children.parent.id'
  | 'posts.content.metaDescription'
  | 'posts.content.postDisplay.coverless'
  | 'posts.content.subtitle'
  | 'posts.coverless'
  | 'posts.createdAt'
  | 'posts.creatorId'
  | 'posts.curationEligibleAt'
  | 'posts.deletedAt'
  | 'posts.detectedLanguage'
  | 'posts.displayAuthor'
  | 'posts.editorialPreviewDek'
  | 'posts.editorialPreviewTitle'
  | 'posts.experimentalCss'
  | 'posts.featureLockRequestAcceptedAt'
  | 'posts.firstPublishedAt'
  | 'posts.hasUnpublishedEdits'
  | 'posts.hightowerMinimumGuaranteeEndsAt'
  | 'posts.hightowerMinimumGuaranteeStartsAt'
  | 'posts.homeCollectionId'
  | 'posts.id'
  | 'posts.importedPublishedAt'
  | 'posts.importedUrl'
  | 'posts.inResponseToMediaResourceId'
  | 'posts.inResponseToPostId'
  | 'posts.inResponseToRemovedAt'
  | 'posts.internal.content'
  | 'posts.internal.contentDigest'
  | 'posts.internal.contentFilePath'
  | 'posts.internal.description'
  | 'posts.internal.fieldOwners'
  | 'posts.internal.ignoreType'
  | 'posts.internal.mediaType'
  | 'posts.internal.owner'
  | 'posts.internal.type'
  | 'posts.isApprovedTranslation'
  | 'posts.isBlockedFromHightower'
  | 'posts.isDistributionAlertDismissed'
  | 'posts.isEligibleForRevenue'
  | 'posts.isLimitedState'
  | 'posts.isLockedResponse'
  | 'posts.isMarkedPaywallOnly'
  | 'posts.isNewsletter'
  | 'posts.isProxyPost'
  | 'posts.isPublishToEmail'
  | 'posts.isSeries'
  | 'posts.isShortform'
  | 'posts.isSubscriptionLocked'
  | 'posts.isSuspended'
  | 'posts.isTitleSynthesized'
  | 'posts.latestPublishedAt'
  | 'posts.latestPublishedVersion'
  | 'posts.latestRev'
  | 'posts.latestVersion'
  | 'posts.layerCake'
  | 'posts.license'
  | 'posts.lockedPostSource'
  | 'posts.mediumUrl'
  | 'posts.medium_id'
  | 'posts.migrationId'
  | 'posts.mongerRequestType'
  | 'posts.newsletterId'
  | 'posts.notifyFacebook'
  | 'posts.notifyFollowers'
  | 'posts.notifyTwitter'
  | 'posts.parent.children'
  | 'posts.parent.children.children'
  | 'posts.parent.children.id'
  | 'posts.parent.id'
  | 'posts.parent.internal.content'
  | 'posts.parent.internal.contentDigest'
  | 'posts.parent.internal.contentFilePath'
  | 'posts.parent.internal.description'
  | 'posts.parent.internal.fieldOwners'
  | 'posts.parent.internal.ignoreType'
  | 'posts.parent.internal.mediaType'
  | 'posts.parent.internal.owner'
  | 'posts.parent.internal.type'
  | 'posts.parent.parent.children'
  | 'posts.parent.parent.id'
  | 'posts.previewContent2.bodyModel.paragraphs'
  | 'posts.previewContent2.bodyModel.sections'
  | 'posts.previewContent2.isFullContent'
  | 'posts.previewContent2.subtitle'
  | 'posts.previewContent.bodyModel.paragraphs'
  | 'posts.previewContent.bodyModel.sections'
  | 'posts.previewContent.isFullContent'
  | 'posts.previewContent.subtitle'
  | 'posts.primaryTopicId'
  | 'posts.proxyPostFaviconUrl'
  | 'posts.proxyPostProviderName'
  | 'posts.proxyPostType'
  | 'posts.responseDistribution'
  | 'posts.responseHiddenOnParentPostAt'
  | 'posts.responsesLocked'
  | 'posts.seoTitle'
  | 'posts.sequenceId'
  | 'posts.seriesLastAppendedAt'
  | 'posts.shortformType'
  | 'posts.slug'
  | 'posts.socialDek'
  | 'posts.socialTitle'
  | 'posts.title'
  | 'posts.translationSourceCreatorId'
  | 'posts.translationSourcePostId'
  | 'posts.type'
  | 'posts.uniqueSlug'
  | 'posts.updatedAt'
  | 'posts.versionId'
  | 'posts.virtuals.allowNotes'
  | 'posts.virtuals.imageCount'
  | 'posts.virtuals.isBookmarked'
  | 'posts.virtuals.isLockedPreviewOnly'
  | 'posts.virtuals.links.entries'
  | 'posts.virtuals.links.generatedAt'
  | 'posts.virtuals.links.version'
  | 'posts.virtuals.metaDescription'
  | 'posts.virtuals.noIndex'
  | 'posts.virtuals.previewImage.backgroundSize'
  | 'posts.virtuals.previewImage.filter'
  | 'posts.virtuals.previewImage.height'
  | 'posts.virtuals.previewImage.imageId'
  | 'posts.virtuals.previewImage.originalHeight'
  | 'posts.virtuals.previewImage.originalWidth'
  | 'posts.virtuals.previewImage.strategy'
  | 'posts.virtuals.previewImage.width'
  | 'posts.virtuals.publishedInCount'
  | 'posts.virtuals.readingList'
  | 'posts.virtuals.readingTime'
  | 'posts.virtuals.recommends'
  | 'posts.virtuals.responsesCreatedCount'
  | 'posts.virtuals.sectionCount'
  | 'posts.virtuals.socialRecommendsCount'
  | 'posts.virtuals.statusForCollection'
  | 'posts.virtuals.subtitle'
  | 'posts.virtuals.tags'
  | 'posts.virtuals.tags.name'
  | 'posts.virtuals.tags.postCount'
  | 'posts.virtuals.tags.slug'
  | 'posts.virtuals.tags.type'
  | 'posts.virtuals.topics'
  | 'posts.virtuals.topics.createdAt'
  | 'posts.virtuals.topics.deletedAt'
  | 'posts.virtuals.topics.description'
  | 'posts.virtuals.topics.name'
  | 'posts.virtuals.topics.seoTitle'
  | 'posts.virtuals.topics.slug'
  | 'posts.virtuals.topics.topicId'
  | 'posts.virtuals.topics.type'
  | 'posts.virtuals.topics.visibility'
  | 'posts.virtuals.totalClapCount'
  | 'posts.virtuals.wordCount'
  | 'posts.visibility'
  | 'posts.vote'
  | 'posts.webCanonicalUrl'
  | 'twitterScreenName'
  | 'type'
  | 'userDismissableFlags'
  | 'userId'
  | 'username';

type MediumUserFilterInput = {
  readonly allowNotes: InputMaybe<IntQueryOperatorInput>;
  readonly backgroundImageId: InputMaybe<StringQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly facebookDisplayName: InputMaybe<StringQueryOperatorInput>;
  readonly hasCompletedProfile: InputMaybe<BooleanQueryOperatorInput>;
  readonly hasSeenIcelandOnboarding: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly imageId: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isMembershipTrialEligible: InputMaybe<BooleanQueryOperatorInput>;
  readonly isSuspended: InputMaybe<BooleanQueryOperatorInput>;
  readonly isWriterProgramEnrolled: InputMaybe<BooleanQueryOperatorInput>;
  readonly languageCode: InputMaybe<StringQueryOperatorInput>;
  readonly mediumMemberAt: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly optInToIceland: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly postSubscribeMembershipUpsellShownAt: InputMaybe<IntQueryOperatorInput>;
  readonly posts: InputMaybe<MediumPostFilterListInput>;
  readonly twitterScreenName: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly userDismissableFlags: InputMaybe<IntQueryOperatorInput>;
  readonly userId: InputMaybe<StringQueryOperatorInput>;
  readonly username: InputMaybe<StringQueryOperatorInput>;
};

type MediumUserGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MediumUserEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MediumUserGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MediumUser>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MediumUserGroupConnection_distinctArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserGroupConnection_groupArgs = {
  field: MediumUserFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MediumUserGroupConnection_maxArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserGroupConnection_minArgs = {
  field: MediumUserFieldsEnum;
};


type MediumUserGroupConnection_sumArgs = {
  field: MediumUserFieldsEnum;
};

type MediumUserSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MediumUserFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allIncentives: IncentivesConnection;
  readonly allJson: JsonConnection;
  readonly allLocale: LocaleConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allMdx: MdxConnection;
  readonly allMediumCollection: MediumCollectionConnection;
  readonly allMediumPost: MediumPostConnection;
  readonly allMediumUser: MediumUserConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStaticImage: StaticImageConnection;
  readonly allTools: ToolsConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly incentives: Maybe<Incentives>;
  readonly json: Maybe<Json>;
  readonly locale: Maybe<Locale>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly mdx: Maybe<Mdx>;
  readonly mediumCollection: Maybe<MediumCollection>;
  readonly mediumPost: Maybe<MediumPost>;
  readonly mediumUser: Maybe<MediumUser>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly staticImage: Maybe<StaticImage>;
  readonly tools: Maybe<Tools>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allIncentivesArgs = {
  filter: InputMaybe<IncentivesFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<IncentivesSortInput>;
};


type Query_allJsonArgs = {
  filter: InputMaybe<JsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<JsonSortInput>;
};


type Query_allLocaleArgs = {
  filter: InputMaybe<LocaleFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<LocaleSortInput>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MarkdownRemarkSortInput>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MdxSortInput>;
};


type Query_allMediumCollectionArgs = {
  filter: InputMaybe<MediumCollectionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MediumCollectionSortInput>;
};


type Query_allMediumPostArgs = {
  filter: InputMaybe<MediumPostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MediumPostSortInput>;
};


type Query_allMediumUserArgs = {
  filter: InputMaybe<MediumUserFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MediumUserSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allStaticImageArgs = {
  filter: InputMaybe<StaticImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<StaticImageSortInput>;
};


type Query_allToolsArgs = {
  filter: InputMaybe<ToolsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ToolsSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childJson: InputMaybe<JsonFilterInput>;
  childLocale: InputMaybe<LocaleFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenJson: InputMaybe<JsonFilterListInput>;
  childrenLocale: InputMaybe<LocaleFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_incentivesArgs = {
  children: InputMaybe<NodeFilterListInput>;
  end_date: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  reward: InputMaybe<StringQueryOperatorInput>;
  start_date: InputMaybe<DateQueryOperatorInput>;
  status: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
};


type Query_jsonArgs = {
  A_fee_for_every_transaction: InputMaybe<StringQueryOperatorInput>;
  Allows_for_unfair_front_running: InputMaybe<StringQueryOperatorInput>;
  Ambassador_program: InputMaybe<StringQueryOperatorInput>;
  Anti_front_running: InputMaybe<StringQueryOperatorInput>;
  As_seen_on: InputMaybe<StringQueryOperatorInput>;
  Automated_cross_margining_in_section_3_of_the_Vega_blog__2__Pro_traders___Vega___2_: InputMaybe<StringQueryOperatorInput>;
  Available: InputMaybe<StringQueryOperatorInput>;
  Avg__Block_Time: InputMaybe<StringQueryOperatorInput>;
  Be_as_good_as_CeFi: InputMaybe<StringQueryOperatorInput>;
  Be_better_than_CeFi: InputMaybe<StringQueryOperatorInput>;
  Blog_posts: InputMaybe<StringQueryOperatorInput>;
  Bounty: InputMaybe<StringQueryOperatorInput>;
  Builders_Club: InputMaybe<StringQueryOperatorInput>;
  Built_for_fairness_from_the_ground_up: InputMaybe<StringQueryOperatorInput>;
  Built_in_liquidity_incentives: InputMaybe<StringQueryOperatorInput>;
  Built_in_live__automated_cross_margining_routes_a_trader_s_gains_made_on_one_market_to_offset_positions_on_other_markets_: InputMaybe<StringQueryOperatorInput>;
  Careers_at_Vega: InputMaybe<StringQueryOperatorInput>;
  Check_out_the_technical__economic_and_mathematical_detail___and_innovative_thinking_behind_Vega_: InputMaybe<StringQueryOperatorInput>;
  Closed_on_: InputMaybe<StringQueryOperatorInput>;
  Community: InputMaybe<StringQueryOperatorInput>;
  Community_at_Vega_starts_with_our_global_team__We_re_a_fast_growing__collaborative__and_multi_disciplinary_team__learning_from_each_other_and_setting_our_sights_on_solving_complex_challenges__If_you_believe_in_the_power_of_decentralisation_and_want_to_change_the_world_of_finance__this_is_your_chance_: InputMaybe<StringQueryOperatorInput>;
  Community_curation_of_markets: InputMaybe<StringQueryOperatorInput>;
  Completely_decentralised_network: InputMaybe<StringQueryOperatorInput>;
  Cross_chain_support: InputMaybe<StringQueryOperatorInput>;
  Cross_chain_support_and_multi_chain_collateral_in_the_Vega_paper_1__Vega_Technical_Overview___1_: InputMaybe<StringQueryOperatorInput>;
  Cross_margining_in_the_Vega_blog__2__Credit_Risk_and_Margins_on_Vega___2_: InputMaybe<StringQueryOperatorInput>;
  Current_Epoch: InputMaybe<StringQueryOperatorInput>;
  DM_us_on_Twitter: InputMaybe<StringQueryOperatorInput>;
  Different_methods_of_price_discovery_in_section_5_of_the_Vega_blog__2_Pro_traders___Vega__2_: InputMaybe<StringQueryOperatorInput>;
  Dive_into_talks_and_podcasts_by_the_Vega_team_on_crypto_derivatives_trading_: InputMaybe<StringQueryOperatorInput>;
  Dynamic_margins_with_cross_margining: InputMaybe<StringQueryOperatorInput>;
  Earn_rewards_for_finding_bugs: InputMaybe<StringQueryOperatorInput>;
  Efficient_Price_Discovery: InputMaybe<StringQueryOperatorInput>;
  Enacted_on_: InputMaybe<StringQueryOperatorInput>;
  Ended: InputMaybe<StringQueryOperatorInput>;
  Error_fetching_proposals___: InputMaybe<StringQueryOperatorInput>;
  Ethereum_and_other_blockchains_suffer_slow_performance_since_they_re_generalist_tools__with_smart_contracts_for_everything___applying_the_same_rules_regardless_of_what_you_use_them_for__They_charge_high_gas_fees_and_require_workarounds_to_be_applied_to_trading__Vega_is_built_from_the_ground_up_using_high_performing__purpose_built_smart_contracts_specifically_for_trading___meaning_no_fees_on_orders__and_fairness_at_its_core_: InputMaybe<StringQueryOperatorInput>;
  Explore_all_proposals: InputMaybe<StringQueryOperatorInput>;
  Explore_how_Vega_bridges_traditional_finance_and_DeFi_to_create_a_bespoke_trading_alternative_: InputMaybe<StringQueryOperatorInput>;
  Explore_the_features_that_enable_you_to_trade_and_create_derivatives_on_a_fully_decentralised_network_: InputMaybe<StringQueryOperatorInput>;
  Fast_trading: InputMaybe<StringQueryOperatorInput>;
  Find_out_how_to_get_your_hands_on_Vega_swag: InputMaybe<StringQueryOperatorInput>;
  Find_your_career_in_DeFi__Join_the_core_team_at_Vega__and_help_create_Web3_s_native_derivatives_layer_: InputMaybe<StringQueryOperatorInput>;
  Fluent_in_this_language__Help_us_translate_the_page_: InputMaybe<StringQueryOperatorInput>;
  For_developers__coders__hackers__dreamers_who_want_to_create_software_on_top_of_Vega_: InputMaybe<StringQueryOperatorInput>;
  For_example__by_using_WebSocket_for_communication_between_your_app_and_the_server__GraphQL_or_gRPC_APIs_for_streaming_market_data_and_Vega_Pennant_for_simple_graphs_you_could_easily_create_responsive_markets_to_monitor_real_world_spot_dynamics_and_automatically_propose_a_hedging_market_when_volatility_exceeds_a_threshold_: InputMaybe<StringQueryOperatorInput>;
  Gas_fees_under__Miner_extractable_value__MEV__on_blockchains__on_the_blog__2__Fair_access_to_efficient_derivatives_markets___2_: InputMaybe<StringQueryOperatorInput>;
  Generalist_tool___A_workaround_for_trading: InputMaybe<StringQueryOperatorInput>;
  Get_your_hands_on_it_here: InputMaybe<StringQueryOperatorInput>;
  Go_to_Fairground: InputMaybe<StringQueryOperatorInput>;
  Have_an_idea_for_an_event_or_talk_: InputMaybe<StringQueryOperatorInput>;
  Help_DeFi_mature: InputMaybe<StringQueryOperatorInput>;
  High_capital_efficiency_in_section_3_of_the_Vega_blog__2_Pro_traders___Vega__2_: InputMaybe<StringQueryOperatorInput>;
  How_Vega_optimises_for_high_capital_efficiency_in_sections_3_5_and_6_6_of_the_Vega_1_whitepaper__1_: InputMaybe<StringQueryOperatorInput>;
  How_it_works: InputMaybe<StringQueryOperatorInput>;
  Implementations: InputMaybe<StringQueryOperatorInput>;
  Incentive: InputMaybe<StringQueryOperatorInput>;
  Incentives___bounties: InputMaybe<StringQueryOperatorInput>;
  Incentives_and_bounties: InputMaybe<StringQueryOperatorInput>;
  Join_the_Vega_community__where_a_fair_finance_future_is_being_co_created___starting_with_derivatives_: InputMaybe<StringQueryOperatorInput>;
  Join_the_core_team_and_work_on_the_Vega_project_: InputMaybe<StringQueryOperatorInput>;
  Key_Vega_Concepts: InputMaybe<StringQueryOperatorInput>;
  Key_concepts: InputMaybe<StringQueryOperatorInput>;
  Key_to_delivering_on_the_promise_of_blockchain_and_DeFi__anyone_can_propose_a_market_on_any_underlying_and_the_community_decides_what_gets_created__unlike_other_decentralised_exchanges__: InputMaybe<StringQueryOperatorInput>;
  Latest_Proposals: InputMaybe<StringQueryOperatorInput>;
  Launch_a_new_market_on_Vega__or_trade__confident_in_the_knowledge_that_the_latest_and_most_accurate_price_is_available_to_you_: InputMaybe<StringQueryOperatorInput>;
  Leading_community_members_share_what_we_re_building_with_those_that_need_to_hear_it___and_get_rewarded_: InputMaybe<StringQueryOperatorInput>;
  Learn: InputMaybe<StringQueryOperatorInput>;
  Loading___: InputMaybe<StringQueryOperatorInput>;
  Lowering_the_barrier_to_wealth_and_value_creation_calls_for_pseudonymous_identities__In_this_way__the_Vega_network_is_accessible_to_anyone_in_the_world_without_restriction_: InputMaybe<StringQueryOperatorInput>;
  Market_curation_in_section_3_4_of_the_Vega__2_whitepaper__2_: InputMaybe<StringQueryOperatorInput>;
  More_info: InputMaybe<StringQueryOperatorInput>;
  Most_decentralised_exchanges_use_a_centralised_order_book__and_centrally_control_what_can_be_traded__With_Vega__everything_from_the_order_book_to_market_creation_and_maintenance__liquidity_provision_and_rewards__prices__management_of_margin_and_how_that_position_eventually_settles_happen_on_chain_as_part_of_the_network___all_of_it_is_managed_and_governed_by_the_community__This_is_trading_with_full_transparency___and_no_black_boxes___doing_away_with_the_risks_that_come_with_centralised_servers_and_single_points_of_failure_and_control_: InputMaybe<StringQueryOperatorInput>;
  No_fees_on_orders: InputMaybe<StringQueryOperatorInput>;
  No_gas_fees_on_trading: InputMaybe<StringQueryOperatorInput>;
  No_proposals_found___: InputMaybe<StringQueryOperatorInput>;
  Open_Jobs: InputMaybe<StringQueryOperatorInput>;
  Optimised_for_high_capital_efficiency: InputMaybe<StringQueryOperatorInput>;
  Or_try_out_the__2_Wendy_prototype__2__on_a_simulated_network: InputMaybe<StringQueryOperatorInput>;
  Overall_portfolio_risk_is_evaluated_by_calculating_the_worst_possible_loss_that_a_portfolio_of_derivative_and_physical_instruments_might_reasonably_incur___live__and_on_chain__instead_of_over_the_course_of_one_trading_day_: InputMaybe<StringQueryOperatorInput>;
  Papers: InputMaybe<StringQueryOperatorInput>;
  Papers___Research: InputMaybe<StringQueryOperatorInput>;
  Pegged_orders_for_automated_management_in_the_Vega_blog__2__How_pegged_orders_work___2_: InputMaybe<StringQueryOperatorInput>;
  Pegged_orders_for_automated_order_management: InputMaybe<StringQueryOperatorInput>;
  Permissionless_market_creation: InputMaybe<StringQueryOperatorInput>;
  Pseudonymous_trading: InputMaybe<StringQueryOperatorInput>;
  Purpose_built_bespoke_blockchain: InputMaybe<StringQueryOperatorInput>;
  Read_more_about_: InputMaybe<StringQueryOperatorInput>;
  Recordings_of_past_talks__events_and_podcasts: InputMaybe<StringQueryOperatorInput>;
  Reward_: InputMaybe<StringQueryOperatorInput>;
  Runs_slowly: InputMaybe<StringQueryOperatorInput>;
  Scalable_DeFi_infrastructure: InputMaybe<StringQueryOperatorInput>;
  See_more: InputMaybe<StringQueryOperatorInput>;
  Small__purpose_built_smart_products_for_trading: InputMaybe<StringQueryOperatorInput>;
  Smart_contracts_for_anything: InputMaybe<StringQueryOperatorInput>;
  Specifically_built_for_trading: InputMaybe<StringQueryOperatorInput>;
  Swag: InputMaybe<StringQueryOperatorInput>;
  Talks: InputMaybe<StringQueryOperatorInput>;
  The_Vega_mainnet_is_live__trading_launch_H2_2022: InputMaybe<StringQueryOperatorInput>;
  The_importance_of_a_purpose_built_blockchain_for_trading_on_the_Vega_blog__2__Innovating_in_decentralised_financial_markets___2_: InputMaybe<StringQueryOperatorInput>;
  The_risk_considerations_behind_pseudonymous_environments_and_Vega_s_protective_measures_in_the_Vega__2_whitepaper__2_: InputMaybe<StringQueryOperatorInput>;
  Token_holders_can_participate_in_governance__stake_and_delegate_: InputMaybe<StringQueryOperatorInput>;
  Total_Staked: InputMaybe<StringQueryOperatorInput>;
  Unlike_other_decentralised_exchanges__Vega_doesn_t_charge_gas_fees__allowing_better_price_discovery__What_s_more__Vega_offers_subsecond_latency_together_with_price_protection_mechanisms_circuit_breakers_and_auctions_in_low_liquidity_regimes_to_discover_true_market_prices_: InputMaybe<StringQueryOperatorInput>;
  Unlock_a__VC__like_approach_of_incubating_a_portfolio_of_new_markets_with_built_in_liquidity_incentives__or__buying_in__to_more_mature_markets___shifting_the_power_and_reward_away_from_exchange_owners_to_market_liquidity_providers__Successful_markets_have_enough_liquidity_to_generate_bustling_activity_: InputMaybe<StringQueryOperatorInput>;
  Use_Fairground__the_Vega_testnet__to_play_without_consequences_: InputMaybe<StringQueryOperatorInput>;
  Use_pegged_orders_on_any_market__at_any_time__to_place_orders_and_automatically_track_another_price_on_the_market__This_enables_advanced_trading_strategies_and_fast_reaction_times_while_removing_concerns_about_latency_and_reducing_the_number_of_manual_transactions_needed_to_maintain_liquidity_provider_orders_: InputMaybe<StringQueryOperatorInput>;
  Use_the_powerful_Vega_Console_app: InputMaybe<StringQueryOperatorInput>;
  Validators: InputMaybe<StringQueryOperatorInput>;
  Vega_currently_lets_users_propose_any_ERC_20_tokens_to_use_as_collateral__Once_the_protocol_is_fully_blockchain_agnostic__trades_will_be_able_to_settle_in_any_crypto_asset_on_a_supported_chain__paving_the_way_for_physically_settled_and_cash_settled_products__as_commodity_and_asset_tokenisation_become_widespread_: InputMaybe<StringQueryOperatorInput>;
  Vega_does_not_charge_gas_fees__It_uses_a_different_fee_structure_that_rewards_participants_and_stimulates_trading_activity__Fees_are_incurred_on_every_trade_on_a_market_in_continuous_trading__but_it_is_the_price_taker_who_pays_the_fee__During_a_market_s_opening_auction__no_fees_are_collected_: InputMaybe<StringQueryOperatorInput>;
  Vega_is_designed_to_: InputMaybe<StringQueryOperatorInput>;
  Vega_protocol_s_rigorous_framework_continuously_monitors_and_manages_credit_risk_more_efficiently_than_centralised_exchanges__A_plugin_like_architecture_for_risk_models_and_best_in_class_stochastic_models_that_run_fast_enough_to_support_frequent_margin_evaluations_allows_traders_with_positions_to_adjust_quickly_: InputMaybe<StringQueryOperatorInput>;
  Vega_s_cross_margining_and_portfolio_risk_evaluation_innovations_significantly_lower_capital_costs_opening_up_hedging_instruments_to_a_far_greater_range_of_people_and_businesses_and_allowing_markets_to_exist_that_previously_wouldn_t_due_to_cost_: InputMaybe<StringQueryOperatorInput>;
  Vega_s_front_running_protection_in_the_papers_1__Wendy__the_Good_Little_Fairness_Widget___1__and__5__Wendy_grows_up___5_: InputMaybe<StringQueryOperatorInput>;
  Vega_s_market_governance_is_designed_to_allow_the_network_to_operate_and_grow_freely__without_manual_or_centralised_intervention__Weighted_voting_happens_by_the_community_allocating__or_staking__their_tokens_to_validator_nodes__Governance_decisions_include_creation_and_closure_of_markets__and_the_setting_of_parameters_that_influence_market_behaviour_: InputMaybe<StringQueryOperatorInput>;
  Vega_s_pre_protocol_widget___Wendy___ensures_all_nodes_see_the_same_sequence_of_transactions_and_provides_cryptographic_proof_that_all_traders_have_fair_access_to_the_order_book__This_creates_a_fair_marketplace_where_no_participant_can_gain_an_unfair_advantage__an_issue_rampant_in_DeFi_and_something_not_even_sophisticated_traditional_exchanges_can_offer_: InputMaybe<StringQueryOperatorInput>;
  Vega_works_alongside_other_layer_1_blockchains___with_open_source_APIs_and_libraries___making_it_easy_to_build_status_quo_challenging_user_interfaces_: InputMaybe<StringQueryOperatorInput>;
  View: InputMaybe<StringQueryOperatorInput>;
  View_all_posts: InputMaybe<StringQueryOperatorInput>;
  View_more: InputMaybe<StringQueryOperatorInput>;
  View_on_Github: InputMaybe<StringQueryOperatorInput>;
  View_the_Roadmap: InputMaybe<StringQueryOperatorInput>;
  Want_Swag_: InputMaybe<StringQueryOperatorInput>;
  We_don_t_currently_have_any_open_job_roles_: InputMaybe<StringQueryOperatorInput>;
  What_makes_Vega_different: InputMaybe<StringQueryOperatorInput>;
  When_: InputMaybe<StringQueryOperatorInput>;
  Your_career_in_Defi_starts_here: InputMaybe<StringQueryOperatorInput>;
  _0_Click_here_to_contribute__0__: InputMaybe<StringQueryOperatorInput>;
  _xminutesxxxminutexread: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_localeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<StringQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  ns: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  collection: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  headings: InputMaybe<MdxHeadingMdxFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mdxAST: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawBody: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MdxWordCountFilterInput>;
};


type Query_mediumCollectionArgs = {
  acceleratedMobilePagesState: InputMaybe<IntQueryOperatorInput>;
  ampLogo: InputMaybe<MediumCollectionAmpLogoFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  collectionFeatures: InputMaybe<IntQueryOperatorInput>;
  colorBehavior: InputMaybe<IntQueryOperatorInput>;
  colorPalette: InputMaybe<MediumCollectionColorPaletteFilterInput>;
  creatorId: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  domain: InputMaybe<StringQueryOperatorInput>;
  facebookPageName: InputMaybe<StringQueryOperatorInput>;
  favicon: InputMaybe<MediumCollectionFaviconFilterInput>;
  header: InputMaybe<MediumCollectionHeaderFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<MediumCollectionImageFilterInput>;
  instantArticlesState: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isCurationAllowedByDefault: InputMaybe<BooleanQueryOperatorInput>;
  isOptedIntoAurora: InputMaybe<BooleanQueryOperatorInput>;
  lightText: InputMaybe<BooleanQueryOperatorInput>;
  logo: InputMaybe<MediumCollectionLogoFilterInput>;
  medium_id: InputMaybe<StringQueryOperatorInput>;
  metadata: InputMaybe<MediumCollectionMetadataFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  navItems: InputMaybe<MediumCollectionNavItemsFilterListInput>;
  paidForDomainAt: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  polarisCoverImage: InputMaybe<MediumCollectionPolarisCoverImageFilterInput>;
  publicEmail: InputMaybe<StringQueryOperatorInput>;
  sections: InputMaybe<MediumCollectionSectionsFilterListInput>;
  shortDescription: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  subscriberCount: InputMaybe<IntQueryOperatorInput>;
  tagline: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  tintColor: InputMaybe<StringQueryOperatorInput>;
  twitterUsername: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  virtuals: InputMaybe<MediumCollectionVirtualsFilterInput>;
};


type Query_mediumPostArgs = {
  acceptedAt: InputMaybe<IntQueryOperatorInput>;
  allowResponses: InputMaybe<BooleanQueryOperatorInput>;
  approvedHomeCollectionId: InputMaybe<StringQueryOperatorInput>;
  audioVersionDurationSec: InputMaybe<IntQueryOperatorInput>;
  author: InputMaybe<MediumUserFilterInput>;
  canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  cardType: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<MediumPostContentFilterInput>;
  coverless: InputMaybe<BooleanQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  creatorId: InputMaybe<StringQueryOperatorInput>;
  curationEligibleAt: InputMaybe<IntQueryOperatorInput>;
  deletedAt: InputMaybe<IntQueryOperatorInput>;
  detectedLanguage: InputMaybe<StringQueryOperatorInput>;
  displayAuthor: InputMaybe<StringQueryOperatorInput>;
  editorialPreviewDek: InputMaybe<StringQueryOperatorInput>;
  editorialPreviewTitle: InputMaybe<StringQueryOperatorInput>;
  experimentalCss: InputMaybe<StringQueryOperatorInput>;
  featureLockRequestAcceptedAt: InputMaybe<IntQueryOperatorInput>;
  firstPublishedAt: InputMaybe<DateQueryOperatorInput>;
  hasUnpublishedEdits: InputMaybe<BooleanQueryOperatorInput>;
  hightowerMinimumGuaranteeEndsAt: InputMaybe<IntQueryOperatorInput>;
  hightowerMinimumGuaranteeStartsAt: InputMaybe<IntQueryOperatorInput>;
  homeCollectionId: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  importedPublishedAt: InputMaybe<IntQueryOperatorInput>;
  importedUrl: InputMaybe<StringQueryOperatorInput>;
  inResponseToMediaResourceId: InputMaybe<StringQueryOperatorInput>;
  inResponseToPostId: InputMaybe<StringQueryOperatorInput>;
  inResponseToRemovedAt: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isApprovedTranslation: InputMaybe<BooleanQueryOperatorInput>;
  isBlockedFromHightower: InputMaybe<BooleanQueryOperatorInput>;
  isDistributionAlertDismissed: InputMaybe<BooleanQueryOperatorInput>;
  isEligibleForRevenue: InputMaybe<BooleanQueryOperatorInput>;
  isLimitedState: InputMaybe<BooleanQueryOperatorInput>;
  isLockedResponse: InputMaybe<BooleanQueryOperatorInput>;
  isMarkedPaywallOnly: InputMaybe<BooleanQueryOperatorInput>;
  isNewsletter: InputMaybe<BooleanQueryOperatorInput>;
  isProxyPost: InputMaybe<BooleanQueryOperatorInput>;
  isPublishToEmail: InputMaybe<BooleanQueryOperatorInput>;
  isSeries: InputMaybe<BooleanQueryOperatorInput>;
  isShortform: InputMaybe<BooleanQueryOperatorInput>;
  isSubscriptionLocked: InputMaybe<BooleanQueryOperatorInput>;
  isSuspended: InputMaybe<BooleanQueryOperatorInput>;
  isTitleSynthesized: InputMaybe<BooleanQueryOperatorInput>;
  latestPublishedAt: InputMaybe<DateQueryOperatorInput>;
  latestPublishedVersion: InputMaybe<StringQueryOperatorInput>;
  latestRev: InputMaybe<IntQueryOperatorInput>;
  latestVersion: InputMaybe<StringQueryOperatorInput>;
  layerCake: InputMaybe<IntQueryOperatorInput>;
  license: InputMaybe<IntQueryOperatorInput>;
  lockedPostSource: InputMaybe<IntQueryOperatorInput>;
  mediumUrl: InputMaybe<StringQueryOperatorInput>;
  medium_id: InputMaybe<StringQueryOperatorInput>;
  migrationId: InputMaybe<StringQueryOperatorInput>;
  mongerRequestType: InputMaybe<IntQueryOperatorInput>;
  newsletterId: InputMaybe<StringQueryOperatorInput>;
  notifyFacebook: InputMaybe<BooleanQueryOperatorInput>;
  notifyFollowers: InputMaybe<BooleanQueryOperatorInput>;
  notifyTwitter: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  previewContent: InputMaybe<MediumPostPreviewContentFilterInput>;
  previewContent2: InputMaybe<MediumPostPreviewContent2FilterInput>;
  primaryTopicId: InputMaybe<StringQueryOperatorInput>;
  proxyPostFaviconUrl: InputMaybe<StringQueryOperatorInput>;
  proxyPostProviderName: InputMaybe<StringQueryOperatorInput>;
  proxyPostType: InputMaybe<IntQueryOperatorInput>;
  responseDistribution: InputMaybe<IntQueryOperatorInput>;
  responseHiddenOnParentPostAt: InputMaybe<IntQueryOperatorInput>;
  responsesLocked: InputMaybe<BooleanQueryOperatorInput>;
  seoTitle: InputMaybe<StringQueryOperatorInput>;
  sequenceId: InputMaybe<StringQueryOperatorInput>;
  seriesLastAppendedAt: InputMaybe<DateQueryOperatorInput>;
  shortformType: InputMaybe<IntQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  socialDek: InputMaybe<StringQueryOperatorInput>;
  socialTitle: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  translationSourceCreatorId: InputMaybe<StringQueryOperatorInput>;
  translationSourcePostId: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uniqueSlug: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  versionId: InputMaybe<StringQueryOperatorInput>;
  virtuals: InputMaybe<MediumPostVirtualsFilterInput>;
  visibility: InputMaybe<IntQueryOperatorInput>;
  vote: InputMaybe<BooleanQueryOperatorInput>;
  webCanonicalUrl: InputMaybe<StringQueryOperatorInput>;
};


type Query_mediumUserArgs = {
  allowNotes: InputMaybe<IntQueryOperatorInput>;
  backgroundImageId: InputMaybe<StringQueryOperatorInput>;
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  facebookDisplayName: InputMaybe<StringQueryOperatorInput>;
  hasCompletedProfile: InputMaybe<BooleanQueryOperatorInput>;
  hasSeenIcelandOnboarding: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  imageId: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isMembershipTrialEligible: InputMaybe<BooleanQueryOperatorInput>;
  isSuspended: InputMaybe<BooleanQueryOperatorInput>;
  isWriterProgramEnrolled: InputMaybe<BooleanQueryOperatorInput>;
  languageCode: InputMaybe<StringQueryOperatorInput>;
  mediumMemberAt: InputMaybe<IntQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  optInToIceland: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  postSubscribeMembershipUpsellShownAt: InputMaybe<IntQueryOperatorInput>;
  posts: InputMaybe<MediumPostFilterListInput>;
  twitterScreenName: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  userDismissableFlags: InputMaybe<IntQueryOperatorInput>;
  userId: InputMaybe<StringQueryOperatorInput>;
  username: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_staticImageArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_toolsArgs = {
  author: InputMaybe<StringQueryOperatorInput>;
  category: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  collection: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.generateOnBuild'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.image'
  | 'siteMetadata.languages'
  | 'siteMetadata.languages.code'
  | 'siteMetadata.languages.localName'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'siteMetadata.titleTemplate'
  | 'siteMetadata.twitter'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly languages: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataLanguages>>>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly titleTemplate: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly languages: InputMaybe<SiteSiteMetadataLanguagesFilterListInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly titleTemplate: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataLanguages = {
  readonly code: Maybe<Scalars['String']>;
  readonly localName: Maybe<Scalars['String']>;
};

type SiteSiteMetadataLanguagesFilterInput = {
  readonly code: InputMaybe<StringQueryOperatorInput>;
  readonly localName: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataLanguagesFilterListInput = {
  readonly elemMatch: InputMaybe<SiteSiteMetadataLanguagesFilterInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StaticImage = Node & {
  readonly absolutePath: Maybe<Scalars['String']>;
  readonly accessTime: Maybe<Scalars['Date']>;
  readonly atime: Maybe<Scalars['Date']>;
  readonly atimeMs: Maybe<Scalars['Float']>;
  readonly base: Maybe<Scalars['String']>;
  readonly birthTime: Maybe<Scalars['Date']>;
  readonly birthtime: Maybe<Scalars['Date']>;
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Maybe<Scalars['Date']>;
  readonly ctimeMs: Maybe<Scalars['Float']>;
  readonly dev: Maybe<Scalars['Int']>;
  readonly dir: Maybe<Scalars['String']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Maybe<Scalars['Int']>;
  readonly internal: Internal;
  readonly mode: Maybe<Scalars['Int']>;
  readonly modifiedTime: Maybe<Scalars['Date']>;
  readonly mtime: Maybe<Scalars['Date']>;
  readonly mtimeMs: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly nlink: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly prettySize: Maybe<Scalars['String']>;
  readonly rdev: Maybe<Scalars['Int']>;
  readonly relativeDirectory: Maybe<Scalars['String']>;
  readonly relativePath: Maybe<Scalars['String']>;
  readonly root: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Int']>;
  readonly sourceInstanceName: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['Int']>;
};


type StaticImage_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StaticImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageConnection_distinctArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_groupArgs = {
  field: StaticImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageConnection_maxArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_minArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageConnection_sumArgs = {
  field: StaticImageFieldsEnum;
};

type StaticImageEdge = {
  readonly next: Maybe<StaticImage>;
  readonly node: StaticImage;
  readonly previous: Maybe<StaticImage>;
};

type StaticImageFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type StaticImageFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type StaticImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageGroupConnection_distinctArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_groupArgs = {
  field: StaticImageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageGroupConnection_maxArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_minArgs = {
  field: StaticImageFieldsEnum;
};


type StaticImageGroupConnection_sumArgs = {
  field: StaticImageFieldsEnum;
};

type StaticImageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<StaticImageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type Tools = Node & {
  readonly author: Maybe<Scalars['String']>;
  readonly category: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly collection: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type ToolsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ToolsEdge>;
  readonly group: ReadonlyArray<ToolsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Tools>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ToolsConnection_distinctArgs = {
  field: ToolsFieldsEnum;
};


type ToolsConnection_groupArgs = {
  field: ToolsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ToolsConnection_maxArgs = {
  field: ToolsFieldsEnum;
};


type ToolsConnection_minArgs = {
  field: ToolsFieldsEnum;
};


type ToolsConnection_sumArgs = {
  field: ToolsFieldsEnum;
};

type ToolsEdge = {
  readonly next: Maybe<Tools>;
  readonly node: Tools;
  readonly previous: Maybe<Tools>;
};

type ToolsFieldsEnum =
  | 'author'
  | 'category'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'collection'
  | 'description'
  | 'icon'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'link'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'title';

type ToolsFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly collection: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ToolsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ToolsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ToolsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Tools>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ToolsGroupConnection_distinctArgs = {
  field: ToolsFieldsEnum;
};


type ToolsGroupConnection_groupArgs = {
  field: ToolsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ToolsGroupConnection_maxArgs = {
  field: ToolsFieldsEnum;
};


type ToolsGroupConnection_minArgs = {
  field: ToolsFieldsEnum;
};


type ToolsGroupConnection_sumArgs = {
  field: ToolsFieldsEnum;
};

type ToolsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ToolsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type LanguagesQueryVariables = Exact<{ [key: string]: never; }>;


type LanguagesQuery = { readonly site: { readonly siteMetadata: { readonly languages: ReadonlyArray<{ readonly localName: string | null, readonly code: string | null } | null> | null } | null } | null };

type SEOQueryVariables = Exact<{ [key: string]: never; }>;


type SEOQuery = { readonly site: { readonly siteMetadata: { readonly titleTemplate: string | null, readonly defaultTitle: string | null, readonly defaultDescription: string | null, readonly siteUrl: string | null, readonly defaultImage: string | null, readonly twitterUsername: string | null } | null } | null };


}
